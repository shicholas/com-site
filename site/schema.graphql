directive @specifiedBy(url: String!) on SCALAR

enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
  json_path_exists
  json_value_recursive
}

enum _MutationInputFieldKind {
  scalar
  richText
  richTextWithEmbeds
  enum
  relation
  union
  virtual
}

enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
  schedulePublish
  scheduleUnpublish
}

enum _OrderDirection {
  asc
  desc
}

enum _RelationInputCardinality {
  one
  many
}

enum _RelationInputKind {
  create
  update
}

enum _RelationKind {
  regular
  union
}

enum _SystemDateTimeFieldVariation {
  base
  localization
  combined
}

type Aggregate {
  count: Int!
}

"""Asset system model"""
type Asset implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Asset!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Asset!]!

  """The mime type of the file"""
  mimeType: String

  """The file size"""
  size: Float

  """The file width"""
  width: Float

  """The height of the file"""
  height: Float

  """The file name"""
  fileName: String!

  """The file handle"""
  handle: String!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  popUpImage(
    where: PopUpWhereInput
    orderBy: PopUpOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `popUpImage` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `popUpImage` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [PopUp!]!
  heroImage(
    where: HeroWhereInput
    orderBy: HeroOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `heroImage` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `heroImage` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Hero!]!
  blogPostCoverImage(
    where: BlogPostWhereInput
    orderBy: BlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `blogPostCoverImage` will be affected directly by this argument,
    as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `blogPostCoverImage` will be affected directly by this argument,
    as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [BlogPost!]!
  personPhoto(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `personPhoto` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `personPhoto` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Person!]!
  seoImage(
    where: SeoWhereInput
    orderBy: SeoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `seoImage` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `seoImage` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Seo!]!
  featureImage(
    where: FeatureWhereInput
    orderBy: FeatureOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `featureImage` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `featureImage` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Feature!]!
  imageEvent(
    where: EventWhereInput
    orderBy: EventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `imageEvent` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `imageEvent` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Event!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!
}

input AssetConnectInput {
  """Document to connect"""
  where: AssetWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}

input AssetCreateInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String!
  handle: String!
  updatedAt: DateTime
  createdAt: DateTime
  popUpImage: PopUpCreateManyInlineInput
  heroImage: HeroCreateManyInlineInput
  blogPostCoverImage: BlogPostCreateManyInlineInput
  personPhoto: PersonCreateManyInlineInput
  seoImage: SeoCreateManyInlineInput
  featureImage: FeatureCreateManyInlineInput
  imageEvent: EventCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
}

input AssetCreateLocalizationDataInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String!
  handle: String!
  updatedAt: DateTime
  createdAt: DateTime
}

input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
  """Create and connect multiple existing Asset documents"""
  create: [AssetCreateInput!]

  """Connect multiple existing Asset documents"""
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateOneInlineInput {
  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Connect one existing Asset document"""
  connect: AssetWhereUniqueInput
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  documentInStages_every: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  popUpImage_every: PopUpWhereInput
  popUpImage_some: PopUpWhereInput
  popUpImage_none: PopUpWhereInput
  heroImage_every: HeroWhereInput
  heroImage_some: HeroWhereInput
  heroImage_none: HeroWhereInput
  blogPostCoverImage_every: BlogPostWhereInput
  blogPostCoverImage_some: BlogPostWhereInput
  blogPostCoverImage_none: BlogPostWhereInput
  personPhoto_every: PersonWhereInput
  personPhoto_some: PersonWhereInput
  personPhoto_none: PersonWhereInput
  seoImage_every: SeoWhereInput
  seoImage_some: SeoWhereInput
  seoImage_none: SeoWhereInput
  featureImage_every: FeatureWhereInput
  featureImage_some: FeatureWhereInput
  featureImage_none: FeatureWhereInput
  imageEvent_every: EventWhereInput
  imageEvent_some: EventWhereInput
  imageEvent_none: EventWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum AssetOrderByInput {
  mimeType_ASC
  mimeType_DESC
  size_ASC
  size_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  fileName_ASC
  fileName_DESC
  handle_ASC
  handle_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String
  handle: String
  popUpImage: PopUpUpdateManyInlineInput
  heroImage: HeroUpdateManyInlineInput
  blogPostCoverImage: BlogPostUpdateManyInlineInput
  personPhoto: PersonUpdateManyInlineInput
  seoImage: SeoUpdateManyInlineInput
  featureImage: FeatureUpdateManyInlineInput
  imageEvent: EventUpdateManyInlineInput

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
}

input AssetUpdateLocalizationDataInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String
  handle: String
}

input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input AssetUpdateManyInlineInput {
  """Create and connect multiple Asset documents"""
  create: [AssetCreateInput!]

  """Connect multiple existing Asset documents"""
  connect: [AssetConnectInput!]

  """
  Override currently-connected documents with multiple existing Asset documents
  """
  set: [AssetWhereUniqueInput!]

  """Update multiple Asset documents"""
  update: [AssetUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Asset documents"""
  upsert: [AssetUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Asset documents"""
  disconnect: [AssetWhereUniqueInput!]

  """Delete multiple Asset documents"""
  delete: [AssetWhereUniqueInput!]
}

input AssetUpdateManyInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
}

input AssetUpdateManyLocalizationDataInput {
  mimeType: String
  size: Float
  width: Float
  height: Float
  fileName: String
}

input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
  """Document search"""
  where: AssetWhereInput!

  """Update many input"""
  data: AssetUpdateManyInput!
}

input AssetUpdateOneInlineInput {
  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Update single Asset document"""
  update: AssetUpdateWithNestedWhereUniqueInput

  """Upsert single Asset document"""
  upsert: AssetUpsertWithNestedWhereUniqueInput

  """Connect existing Asset document"""
  connect: AssetWhereUniqueInput

  """Disconnect currently connected Asset document"""
  disconnect: Boolean

  """Delete currently connected Asset document"""
  delete: Boolean
}

input AssetUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Document to update"""
  data: AssetUpdateInput!
}

input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Upsert data"""
  data: AssetUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input AssetWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input AssetWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  documentInStages_every: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String]

  """All values that are not contained in given list."""
  mimeType_not_in: [String]

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float]

  """All values that are not contained in given list."""
  size_not_in: [Float]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float]

  """All values that are not contained in given list."""
  width_not_in: [Float]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float]

  """All values that are not contained in given list."""
  height_not_in: [Float]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String]

  """All values that are not contained in given list."""
  fileName_not_in: [String]

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String
  handle: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values that are contained in given list."""
  handle_in: [String]

  """All values that are not contained in given list."""
  handle_not_in: [String]

  """All values containing the given string."""
  handle_contains: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values starting with the given string."""
  handle_starts_with: String

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values not ending with the given string"""
  handle_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  popUpImage_every: PopUpWhereInput
  popUpImage_some: PopUpWhereInput
  popUpImage_none: PopUpWhereInput
  heroImage_every: HeroWhereInput
  heroImage_some: HeroWhereInput
  heroImage_none: HeroWhereInput
  blogPostCoverImage_every: BlogPostWhereInput
  blogPostCoverImage_some: BlogPostWhereInput
  blogPostCoverImage_none: BlogPostWhereInput
  personPhoto_every: PersonWhereInput
  personPhoto_some: PersonWhereInput
  personPhoto_none: PersonWhereInput
  seoImage_every: SeoWhereInput
  seoImage_some: SeoWhereInput
  seoImage_none: SeoWhereInput
  featureImage_every: FeatureWhereInput
  featureImage_some: FeatureWhereInput
  featureImage_none: FeatureWhereInput
  imageEvent_every: EventWhereInput
  imageEvent_some: EventWhereInput
  imageEvent_none: EventWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input AssetWhereStageInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: AssetWhereComparatorInput
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

enum BannerTheme {
  INFO
  WARNING
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum BlogCategory {
  GUIDE
  ANNOUNCEMENT
}

type BlogPost implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [BlogPost!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [BlogPost!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  excerpt: String
  published: Date
  content: String!
  slug: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  coverImage(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `coverImage` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `coverImage` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset!
  authors(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `authors` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `authors` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Person!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!
  seo(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `seo` is a model without localized fields and will not be affected
    directly by this argument, however the locales will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `seo` is a model without localized fields and will not be affected
    directly by this argument, however the locale will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Seo
  marketingMaterial(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `marketingMaterial` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `marketingMaterial` is a model without localized fields and will
    not be affected directly by this argument, however the locale will be passed
    on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [BlogPostMarketingMaterial!]!

  """List of BlogPost versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input BlogPostConnectInput {
  """Document to connect"""
  where: BlogPostWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type BlogPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlogPostEdge!]!
  aggregate: Aggregate!
}

input BlogPostCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """title input for default locale (en)"""
  title: String!

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String!
  slug: String!
  coverImage: AssetCreateOneInlineInput!
  authors: PersonCreateManyInlineInput
  seo: SeoCreateOneInlineInput
  marketingMaterial: BlogPostMarketingMaterialCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: BlogPostCreateLocalizationsInput
}

input BlogPostCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  excerpt: String
  content: String!
}

input BlogPostCreateLocalizationInput {
  """Localization input"""
  data: BlogPostCreateLocalizationDataInput!
  locale: Locale!
}

input BlogPostCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [BlogPostCreateLocalizationInput!]
}

input BlogPostCreateManyInlineInput {
  """Create and connect multiple existing BlogPost documents"""
  create: [BlogPostCreateInput!]

  """Connect multiple existing BlogPost documents"""
  connect: [BlogPostWhereUniqueInput!]
}

input BlogPostCreateOneInlineInput {
  """Create and connect one BlogPost document"""
  create: BlogPostCreateInput

  """Connect one existing BlogPost document"""
  connect: BlogPostWhereUniqueInput
}

"""An edge in a connection."""
type BlogPostEdge {
  """The item at the end of the edge."""
  node: BlogPost!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input BlogPostManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [BlogPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogPostWhereInput!]
  documentInStages_every: BlogPostWhereStageInput
  documentInStages_some: BlogPostWhereStageInput
  documentInStages_none: BlogPostWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  published: Date

  """All values that are not equal to given value."""
  published_not: Date

  """All values that are contained in given list."""
  published_in: [Date]

  """All values that are not contained in given list."""
  published_not_in: [Date]

  """All values less than the given value."""
  published_lt: Date

  """All values less than or equal the given value."""
  published_lte: Date

  """All values greater than the given value."""
  published_gt: Date

  """All values greater than or equal the given value."""
  published_gte: Date
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  coverImage: AssetWhereInput
  authors_every: PersonWhereInput
  authors_some: PersonWhereInput
  authors_none: PersonWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  seo: SeoWhereInput
}

union BlogPostMarketingMaterial = PopUp

input BlogPostMarketingMaterialConnectInput {
  PopUp: PopUpConnectInput
}

input BlogPostMarketingMaterialCreateInput {
  PopUp: PopUpCreateInput
}

input BlogPostMarketingMaterialCreateManyInlineInput {
  """
  Create and connect multiple existing BlogPostMarketingMaterial documents
  """
  create: [BlogPostMarketingMaterialCreateInput!]

  """Connect multiple existing BlogPostMarketingMaterial documents"""
  connect: [BlogPostMarketingMaterialWhereUniqueInput!]
}

input BlogPostMarketingMaterialCreateOneInlineInput {
  """Create and connect one BlogPostMarketingMaterial document"""
  create: BlogPostMarketingMaterialCreateInput

  """Connect one existing BlogPostMarketingMaterial document"""
  connect: BlogPostMarketingMaterialWhereUniqueInput
}

input BlogPostMarketingMaterialUpdateInput {
  PopUp: PopUpUpdateInput
}

input BlogPostMarketingMaterialUpdateManyInlineInput {
  """Create and connect multiple BlogPostMarketingMaterial documents"""
  create: [BlogPostMarketingMaterialCreateInput!]

  """Connect multiple existing BlogPostMarketingMaterial documents"""
  connect: [BlogPostMarketingMaterialConnectInput!]

  """
  Override currently-connected documents with multiple existing BlogPostMarketingMaterial documents
  """
  set: [BlogPostMarketingMaterialWhereUniqueInput!]

  """Update multiple BlogPostMarketingMaterial documents"""
  update: [BlogPostMarketingMaterialUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple BlogPostMarketingMaterial documents"""
  upsert: [BlogPostMarketingMaterialUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple BlogPostMarketingMaterial documents"""
  disconnect: [BlogPostMarketingMaterialWhereUniqueInput!]

  """Delete multiple BlogPostMarketingMaterial documents"""
  delete: [BlogPostMarketingMaterialWhereUniqueInput!]
}

input BlogPostMarketingMaterialUpdateManyWithNestedWhereInput {
  PopUp: PopUpUpdateManyWithNestedWhereInput
}

input BlogPostMarketingMaterialUpdateOneInlineInput {
  """Create and connect one BlogPostMarketingMaterial document"""
  create: BlogPostMarketingMaterialCreateInput

  """Update single BlogPostMarketingMaterial document"""
  update: BlogPostMarketingMaterialUpdateWithNestedWhereUniqueInput

  """Upsert single BlogPostMarketingMaterial document"""
  upsert: BlogPostMarketingMaterialUpsertWithNestedWhereUniqueInput

  """Connect existing BlogPostMarketingMaterial document"""
  connect: BlogPostMarketingMaterialWhereUniqueInput

  """Disconnect currently connected BlogPostMarketingMaterial document"""
  disconnect: Boolean

  """Delete currently connected BlogPostMarketingMaterial document"""
  delete: Boolean
}

input BlogPostMarketingMaterialUpdateWithNestedWhereUniqueInput {
  PopUp: PopUpUpdateWithNestedWhereUniqueInput
}

input BlogPostMarketingMaterialUpsertWithNestedWhereUniqueInput {
  PopUp: PopUpUpsertWithNestedWhereUniqueInput
}

input BlogPostMarketingMaterialWhereInput {
  PopUp: PopUpWhereInput
}

input BlogPostMarketingMaterialWhereUniqueInput {
  PopUp: PopUpWhereUniqueInput
}

enum BlogPostOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  excerpt_ASC
  excerpt_DESC
  published_ASC
  published_DESC
  content_ASC
  content_DESC
  slug_ASC
  slug_DESC
}

input BlogPostUpdateInput {
  """title input for default locale (en)"""
  title: String

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String
  slug: String
  coverImage: AssetUpdateOneInlineInput
  authors: PersonUpdateManyInlineInput
  seo: SeoUpdateOneInlineInput
  marketingMaterial: BlogPostMarketingMaterialUpdateManyInlineInput

  """Manage document localizations"""
  localizations: BlogPostUpdateLocalizationsInput
}

input BlogPostUpdateLocalizationDataInput {
  title: String
  excerpt: String
  content: String
}

input BlogPostUpdateLocalizationInput {
  data: BlogPostUpdateLocalizationDataInput!
  locale: Locale!
}

input BlogPostUpdateLocalizationsInput {
  """Localizations to create"""
  create: [BlogPostCreateLocalizationInput!]

  """Localizations to update"""
  update: [BlogPostUpdateLocalizationInput!]
  upsert: [BlogPostUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input BlogPostUpdateManyInlineInput {
  """Create and connect multiple BlogPost documents"""
  create: [BlogPostCreateInput!]

  """Connect multiple existing BlogPost documents"""
  connect: [BlogPostConnectInput!]

  """
  Override currently-connected documents with multiple existing BlogPost documents
  """
  set: [BlogPostWhereUniqueInput!]

  """Update multiple BlogPost documents"""
  update: [BlogPostUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple BlogPost documents"""
  upsert: [BlogPostUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple BlogPost documents"""
  disconnect: [BlogPostWhereUniqueInput!]

  """Delete multiple BlogPost documents"""
  delete: [BlogPostWhereUniqueInput!]
}

input BlogPostUpdateManyInput {
  """title input for default locale (en)"""
  title: String

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String

  """Optional updates to localizations"""
  localizations: BlogPostUpdateManyLocalizationsInput
}

input BlogPostUpdateManyLocalizationDataInput {
  title: String
  excerpt: String
  content: String
}

input BlogPostUpdateManyLocalizationInput {
  data: BlogPostUpdateManyLocalizationDataInput!
  locale: Locale!
}

input BlogPostUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [BlogPostUpdateManyLocalizationInput!]
}

input BlogPostUpdateManyWithNestedWhereInput {
  """Document search"""
  where: BlogPostWhereInput!

  """Update many input"""
  data: BlogPostUpdateManyInput!
}

input BlogPostUpdateOneInlineInput {
  """Create and connect one BlogPost document"""
  create: BlogPostCreateInput

  """Update single BlogPost document"""
  update: BlogPostUpdateWithNestedWhereUniqueInput

  """Upsert single BlogPost document"""
  upsert: BlogPostUpsertWithNestedWhereUniqueInput

  """Connect existing BlogPost document"""
  connect: BlogPostWhereUniqueInput

  """Disconnect currently connected BlogPost document"""
  disconnect: Boolean

  """Delete currently connected BlogPost document"""
  delete: Boolean
}

input BlogPostUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: BlogPostWhereUniqueInput!

  """Document to update"""
  data: BlogPostUpdateInput!
}

input BlogPostUpsertInput {
  """Create document if it didn't exist"""
  create: BlogPostCreateInput!

  """Update document if it exists"""
  update: BlogPostUpdateInput!
}

input BlogPostUpsertLocalizationInput {
  update: BlogPostUpdateLocalizationDataInput!
  create: BlogPostCreateLocalizationDataInput!
  locale: Locale!
}

input BlogPostUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: BlogPostWhereUniqueInput!

  """Upsert data"""
  data: BlogPostUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input BlogPostWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input BlogPostWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [BlogPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogPostWhereInput!]
  documentInStages_every: BlogPostWhereStageInput
  documentInStages_some: BlogPostWhereStageInput
  documentInStages_none: BlogPostWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  excerpt: String

  """All values that are not equal to given value."""
  excerpt_not: String

  """All values that are contained in given list."""
  excerpt_in: [String]

  """All values that are not contained in given list."""
  excerpt_not_in: [String]

  """All values containing the given string."""
  excerpt_contains: String

  """All values not containing the given string."""
  excerpt_not_contains: String

  """All values starting with the given string."""
  excerpt_starts_with: String

  """All values not starting with the given string."""
  excerpt_not_starts_with: String

  """All values ending with the given string."""
  excerpt_ends_with: String

  """All values not ending with the given string"""
  excerpt_not_ends_with: String
  published: Date

  """All values that are not equal to given value."""
  published_not: Date

  """All values that are contained in given list."""
  published_in: [Date]

  """All values that are not contained in given list."""
  published_not_in: [Date]

  """All values less than the given value."""
  published_lt: Date

  """All values less than or equal the given value."""
  published_lte: Date

  """All values greater than the given value."""
  published_gt: Date

  """All values greater than or equal the given value."""
  published_gte: Date
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String]

  """All values that are not contained in given list."""
  content_not_in: [String]

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string"""
  content_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  coverImage: AssetWhereInput
  authors_every: PersonWhereInput
  authors_some: PersonWhereInput
  authors_none: PersonWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  seo: SeoWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input BlogPostWhereStageInput {
  """Logical AND on all given filters."""
  AND: [BlogPostWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [BlogPostWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogPostWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: BlogPostWhereComparatorInput
}

"""References BlogPost record uniquely"""
input BlogPostWhereUniqueInput {
  id: ID
  slug: String
}

enum ButtonTheme {
  INDIGO
  WHITE
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}

input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at first position"""
  start: Boolean

  """Connect document at last position"""
  end: Boolean
}

"""A model for writing copy on the website."""
type Copy implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Copy!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!

  """
  The same name as the React component this model will be used in. This should be a PascalCase field.
  """
  component: String!

  """A dictionary of values to retrieve data rom."""
  values: Json!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Copy versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input CopyConnectInput {
  """Document to connect"""
  where: CopyWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type CopyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CopyEdge!]!
  aggregate: Aggregate!
}

input CopyCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  component: String!
  values: Json!
}

input CopyCreateManyInlineInput {
  """Create and connect multiple existing Copy documents"""
  create: [CopyCreateInput!]

  """Connect multiple existing Copy documents"""
  connect: [CopyWhereUniqueInput!]
}

input CopyCreateOneInlineInput {
  """Create and connect one Copy document"""
  create: CopyCreateInput

  """Connect one existing Copy document"""
  connect: CopyWhereUniqueInput
}

"""An edge in a connection."""
type CopyEdge {
  """The item at the end of the edge."""
  node: Copy!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input CopyManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CopyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CopyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CopyWhereInput!]
  documentInStages_every: CopyWhereStageInput
  documentInStages_some: CopyWhereStageInput
  documentInStages_none: CopyWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  component: String

  """All values that are not equal to given value."""
  component_not: String

  """All values that are contained in given list."""
  component_in: [String]

  """All values that are not contained in given list."""
  component_not_in: [String]

  """All values containing the given string."""
  component_contains: String

  """All values not containing the given string."""
  component_not_contains: String

  """All values starting with the given string."""
  component_starts_with: String

  """All values not starting with the given string."""
  component_not_starts_with: String

  """All values ending with the given string."""
  component_ends_with: String

  """All values not ending with the given string"""
  component_not_ends_with: String

  """All values containing the given json path."""
  values_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  values_value_recursive: Json
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum CopyOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  component_ASC
  component_DESC
}

input CopyUpdateInput {
  component: String
  values: Json
}

input CopyUpdateManyInlineInput {
  """Create and connect multiple Copy documents"""
  create: [CopyCreateInput!]

  """Connect multiple existing Copy documents"""
  connect: [CopyConnectInput!]

  """
  Override currently-connected documents with multiple existing Copy documents
  """
  set: [CopyWhereUniqueInput!]

  """Update multiple Copy documents"""
  update: [CopyUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Copy documents"""
  upsert: [CopyUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Copy documents"""
  disconnect: [CopyWhereUniqueInput!]

  """Delete multiple Copy documents"""
  delete: [CopyWhereUniqueInput!]
}

input CopyUpdateManyInput {
  values: Json
}

input CopyUpdateManyWithNestedWhereInput {
  """Document search"""
  where: CopyWhereInput!

  """Update many input"""
  data: CopyUpdateManyInput!
}

input CopyUpdateOneInlineInput {
  """Create and connect one Copy document"""
  create: CopyCreateInput

  """Update single Copy document"""
  update: CopyUpdateWithNestedWhereUniqueInput

  """Upsert single Copy document"""
  upsert: CopyUpsertWithNestedWhereUniqueInput

  """Connect existing Copy document"""
  connect: CopyWhereUniqueInput

  """Disconnect currently connected Copy document"""
  disconnect: Boolean

  """Delete currently connected Copy document"""
  delete: Boolean
}

input CopyUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CopyWhereUniqueInput!

  """Document to update"""
  data: CopyUpdateInput!
}

input CopyUpsertInput {
  """Create document if it didn't exist"""
  create: CopyCreateInput!

  """Update document if it exists"""
  update: CopyUpdateInput!
}

input CopyUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CopyWhereUniqueInput!

  """Upsert data"""
  data: CopyUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input CopyWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input CopyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CopyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CopyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CopyWhereInput!]
  documentInStages_every: CopyWhereStageInput
  documentInStages_some: CopyWhereStageInput
  documentInStages_none: CopyWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  component: String

  """All values that are not equal to given value."""
  component_not: String

  """All values that are contained in given list."""
  component_in: [String]

  """All values that are not contained in given list."""
  component_not_in: [String]

  """All values containing the given string."""
  component_contains: String

  """All values not containing the given string."""
  component_not_contains: String

  """All values starting with the given string."""
  component_starts_with: String

  """All values not starting with the given string."""
  component_not_starts_with: String

  """All values ending with the given string."""
  component_ends_with: String

  """All values not ending with the given string"""
  component_not_ends_with: String

  """All values containing the given json path."""
  values_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  values_value_recursive: Json
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input CopyWhereStageInput {
  """Logical AND on all given filters."""
  AND: [CopyWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [CopyWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CopyWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: CopyWhereComparatorInput
}

"""References Copy record uniquely"""
input CopyWhereUniqueInput {
  id: ID
  component: String
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard
for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601
standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

type DocumentVersion {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
  data: Json
}

"""Events like CLEs and conferences we attend."""
type Event implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Event!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Event!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  description: String
  title: String!
  slug: String!
  beginsAt: Date!
  endsAt: DateTime!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """Image for the Event"""
  image(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Event versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input EventConnectInput {
  """Document to connect"""
  where: EventWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge!]!
  aggregate: Aggregate!
}

input EventCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  description: String

  """title input for default locale (en)"""
  title: String!
  slug: String!
  beginsAt: Date!
  endsAt: DateTime!
  image: AssetCreateOneInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: EventCreateLocalizationsInput
}

input EventCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
}

input EventCreateLocalizationInput {
  """Localization input"""
  data: EventCreateLocalizationDataInput!
  locale: Locale!
}

input EventCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [EventCreateLocalizationInput!]
}

input EventCreateManyInlineInput {
  """Create and connect multiple existing Event documents"""
  create: [EventCreateInput!]

  """Connect multiple existing Event documents"""
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInlineInput {
  """Create and connect one Event document"""
  create: EventCreateInput

  """Connect one existing Event document"""
  connect: EventWhereUniqueInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input EventManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  documentInStages_every: EventWhereStageInput
  documentInStages_some: EventWhereStageInput
  documentInStages_none: EventWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  beginsAt: Date

  """All values that are not equal to given value."""
  beginsAt_not: Date

  """All values that are contained in given list."""
  beginsAt_in: [Date]

  """All values that are not contained in given list."""
  beginsAt_not_in: [Date]

  """All values less than the given value."""
  beginsAt_lt: Date

  """All values less than or equal the given value."""
  beginsAt_lte: Date

  """All values greater than the given value."""
  beginsAt_gt: Date

  """All values greater than or equal the given value."""
  beginsAt_gte: Date
  endsAt: DateTime

  """All values that are not equal to given value."""
  endsAt_not: DateTime

  """All values that are contained in given list."""
  endsAt_in: [DateTime]

  """All values that are not contained in given list."""
  endsAt_not_in: [DateTime]

  """All values less than the given value."""
  endsAt_lt: DateTime

  """All values less than or equal the given value."""
  endsAt_lte: DateTime

  """All values greater than the given value."""
  endsAt_gt: DateTime

  """All values greater than or equal the given value."""
  endsAt_gte: DateTime
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum EventOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  beginsAt_ASC
  beginsAt_DESC
  endsAt_ASC
  endsAt_DESC
}

input EventUpdateInput {
  description: String

  """title input for default locale (en)"""
  title: String
  slug: String
  beginsAt: Date
  endsAt: DateTime
  image: AssetUpdateOneInlineInput

  """Manage document localizations"""
  localizations: EventUpdateLocalizationsInput
}

input EventUpdateLocalizationDataInput {
  title: String
}

input EventUpdateLocalizationInput {
  data: EventUpdateLocalizationDataInput!
  locale: Locale!
}

input EventUpdateLocalizationsInput {
  """Localizations to create"""
  create: [EventCreateLocalizationInput!]

  """Localizations to update"""
  update: [EventUpdateLocalizationInput!]
  upsert: [EventUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input EventUpdateManyInlineInput {
  """Create and connect multiple Event documents"""
  create: [EventCreateInput!]

  """Connect multiple existing Event documents"""
  connect: [EventConnectInput!]

  """
  Override currently-connected documents with multiple existing Event documents
  """
  set: [EventWhereUniqueInput!]

  """Update multiple Event documents"""
  update: [EventUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Event documents"""
  upsert: [EventUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Event documents"""
  disconnect: [EventWhereUniqueInput!]

  """Delete multiple Event documents"""
  delete: [EventWhereUniqueInput!]
}

input EventUpdateManyInput {
  description: String

  """title input for default locale (en)"""
  title: String
  beginsAt: Date
  endsAt: DateTime

  """Optional updates to localizations"""
  localizations: EventUpdateManyLocalizationsInput
}

input EventUpdateManyLocalizationDataInput {
  title: String
}

input EventUpdateManyLocalizationInput {
  data: EventUpdateManyLocalizationDataInput!
  locale: Locale!
}

input EventUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [EventUpdateManyLocalizationInput!]
}

input EventUpdateManyWithNestedWhereInput {
  """Document search"""
  where: EventWhereInput!

  """Update many input"""
  data: EventUpdateManyInput!
}

input EventUpdateOneInlineInput {
  """Create and connect one Event document"""
  create: EventCreateInput

  """Update single Event document"""
  update: EventUpdateWithNestedWhereUniqueInput

  """Upsert single Event document"""
  upsert: EventUpsertWithNestedWhereUniqueInput

  """Connect existing Event document"""
  connect: EventWhereUniqueInput

  """Disconnect currently connected Event document"""
  disconnect: Boolean

  """Delete currently connected Event document"""
  delete: Boolean
}

input EventUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: EventWhereUniqueInput!

  """Document to update"""
  data: EventUpdateInput!
}

input EventUpsertInput {
  """Create document if it didn't exist"""
  create: EventCreateInput!

  """Update document if it exists"""
  update: EventUpdateInput!
}

input EventUpsertLocalizationInput {
  update: EventUpdateLocalizationDataInput!
  create: EventCreateLocalizationDataInput!
  locale: Locale!
}

input EventUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: EventWhereUniqueInput!

  """Upsert data"""
  data: EventUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input EventWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input EventWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  documentInStages_every: EventWhereStageInput
  documentInStages_some: EventWhereStageInput
  documentInStages_none: EventWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  beginsAt: Date

  """All values that are not equal to given value."""
  beginsAt_not: Date

  """All values that are contained in given list."""
  beginsAt_in: [Date]

  """All values that are not contained in given list."""
  beginsAt_not_in: [Date]

  """All values less than the given value."""
  beginsAt_lt: Date

  """All values less than or equal the given value."""
  beginsAt_lte: Date

  """All values greater than the given value."""
  beginsAt_gt: Date

  """All values greater than or equal the given value."""
  beginsAt_gte: Date
  endsAt: DateTime

  """All values that are not equal to given value."""
  endsAt_not: DateTime

  """All values that are contained in given list."""
  endsAt_in: [DateTime]

  """All values that are not contained in given list."""
  endsAt_not_in: [DateTime]

  """All values less than the given value."""
  endsAt_lt: DateTime

  """All values less than or equal the given value."""
  endsAt_lte: DateTime

  """All values greater than the given value."""
  endsAt_gt: DateTime

  """All values greater than or equal the given value."""
  endsAt_gte: DateTime
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input EventWhereStageInput {
  """Logical AND on all given filters."""
  AND: [EventWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: EventWhereComparatorInput
}

"""References Event record uniquely"""
input EventWhereUniqueInput {
  id: ID
  slug: String
}

type Feature implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Feature!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Feature!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  slug: String!
  content: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  image(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset!
  icon: FeatureIcon!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Feature versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input FeatureConnectInput {
  """Document to connect"""
  where: FeatureWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FeatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeatureEdge!]!
  aggregate: Aggregate!
}

input FeatureCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """title input for default locale (en)"""
  title: String!
  slug: String!

  """content input for default locale (en)"""
  content: String!
  image: AssetCreateOneInlineInput!
  icon: FeatureIcon!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: FeatureCreateLocalizationsInput
}

input FeatureCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  content: String!
}

input FeatureCreateLocalizationInput {
  """Localization input"""
  data: FeatureCreateLocalizationDataInput!
  locale: Locale!
}

input FeatureCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [FeatureCreateLocalizationInput!]
}

input FeatureCreateManyInlineInput {
  """Create and connect multiple existing Feature documents"""
  create: [FeatureCreateInput!]

  """Connect multiple existing Feature documents"""
  connect: [FeatureWhereUniqueInput!]
}

input FeatureCreateOneInlineInput {
  """Create and connect one Feature document"""
  create: FeatureCreateInput

  """Connect one existing Feature document"""
  connect: FeatureWhereUniqueInput
}

"""An edge in a connection."""
type FeatureEdge {
  """The item at the end of the edge."""
  node: Feature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeatureIcon {
  GLOBE
  SCALE
  BOLT
  MAIL
}

"""Identifies documents"""
input FeatureManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FeatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureWhereInput!]
  documentInStages_every: FeatureWhereStageInput
  documentInStages_some: FeatureWhereStageInput
  documentInStages_none: FeatureWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  icon: FeatureIcon

  """All values that are not equal to given value."""
  icon_not: FeatureIcon

  """All values that are contained in given list."""
  icon_in: [FeatureIcon]

  """All values that are not contained in given list."""
  icon_not_in: [FeatureIcon]
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum FeatureOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  icon_ASC
  icon_DESC
}

input FeatureUpdateInput {
  """title input for default locale (en)"""
  title: String
  slug: String

  """content input for default locale (en)"""
  content: String
  image: AssetUpdateOneInlineInput
  icon: FeatureIcon

  """Manage document localizations"""
  localizations: FeatureUpdateLocalizationsInput
}

input FeatureUpdateLocalizationDataInput {
  title: String
  content: String
}

input FeatureUpdateLocalizationInput {
  data: FeatureUpdateLocalizationDataInput!
  locale: Locale!
}

input FeatureUpdateLocalizationsInput {
  """Localizations to create"""
  create: [FeatureCreateLocalizationInput!]

  """Localizations to update"""
  update: [FeatureUpdateLocalizationInput!]
  upsert: [FeatureUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input FeatureUpdateManyInlineInput {
  """Create and connect multiple Feature documents"""
  create: [FeatureCreateInput!]

  """Connect multiple existing Feature documents"""
  connect: [FeatureConnectInput!]

  """
  Override currently-connected documents with multiple existing Feature documents
  """
  set: [FeatureWhereUniqueInput!]

  """Update multiple Feature documents"""
  update: [FeatureUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Feature documents"""
  upsert: [FeatureUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Feature documents"""
  disconnect: [FeatureWhereUniqueInput!]

  """Delete multiple Feature documents"""
  delete: [FeatureWhereUniqueInput!]
}

input FeatureUpdateManyInput {
  """title input for default locale (en)"""
  title: String

  """content input for default locale (en)"""
  content: String
  icon: FeatureIcon

  """Optional updates to localizations"""
  localizations: FeatureUpdateManyLocalizationsInput
}

input FeatureUpdateManyLocalizationDataInput {
  title: String
  content: String
}

input FeatureUpdateManyLocalizationInput {
  data: FeatureUpdateManyLocalizationDataInput!
  locale: Locale!
}

input FeatureUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [FeatureUpdateManyLocalizationInput!]
}

input FeatureUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FeatureWhereInput!

  """Update many input"""
  data: FeatureUpdateManyInput!
}

input FeatureUpdateOneInlineInput {
  """Create and connect one Feature document"""
  create: FeatureCreateInput

  """Update single Feature document"""
  update: FeatureUpdateWithNestedWhereUniqueInput

  """Upsert single Feature document"""
  upsert: FeatureUpsertWithNestedWhereUniqueInput

  """Connect existing Feature document"""
  connect: FeatureWhereUniqueInput

  """Disconnect currently connected Feature document"""
  disconnect: Boolean

  """Delete currently connected Feature document"""
  delete: Boolean
}

input FeatureUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FeatureWhereUniqueInput!

  """Document to update"""
  data: FeatureUpdateInput!
}

input FeatureUpsertInput {
  """Create document if it didn't exist"""
  create: FeatureCreateInput!

  """Update document if it exists"""
  update: FeatureUpdateInput!
}

input FeatureUpsertLocalizationInput {
  update: FeatureUpdateLocalizationDataInput!
  create: FeatureCreateLocalizationDataInput!
  locale: Locale!
}

input FeatureUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FeatureWhereUniqueInput!

  """Upsert data"""
  data: FeatureUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input FeatureWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input FeatureWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FeatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureWhereInput!]
  documentInStages_every: FeatureWhereStageInput
  documentInStages_some: FeatureWhereStageInput
  documentInStages_none: FeatureWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String]

  """All values that are not contained in given list."""
  content_not_in: [String]

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string"""
  content_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  icon: FeatureIcon

  """All values that are not equal to given value."""
  icon_not: FeatureIcon

  """All values that are contained in given list."""
  icon_in: [FeatureIcon]

  """All values that are not contained in given list."""
  icon_not_in: [FeatureIcon]
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input FeatureWhereStageInput {
  """Logical AND on all given filters."""
  AND: [FeatureWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [FeatureWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: FeatureWhereComparatorInput
}

"""References Feature record uniquely"""
input FeatureWhereUniqueInput {
  id: ID
  slug: String
}

type Footer implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Footer!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  slug: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  primaryLinks(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `primaryLinks` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `primaryLinks` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!
  secondaryLinks(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `secondaryLinks` will be affected directly by this argument, as
    well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `secondaryLinks` will be affected directly by this argument, as
    well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Footer versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input FooterConnectInput {
  """Document to connect"""
  where: FooterWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FooterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FooterEdge!]!
  aggregate: Aggregate!
}

input FooterCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  slug: String!
  primaryLinks: PageCreateManyInlineInput
  secondaryLinks: PageCreateManyInlineInput
  pages: PageCreateManyInlineInput
}

input FooterCreateManyInlineInput {
  """Create and connect multiple existing Footer documents"""
  create: [FooterCreateInput!]

  """Connect multiple existing Footer documents"""
  connect: [FooterWhereUniqueInput!]
}

input FooterCreateOneInlineInput {
  """Create and connect one Footer document"""
  create: FooterCreateInput

  """Connect one existing Footer document"""
  connect: FooterWhereUniqueInput
}

"""An edge in a connection."""
type FooterEdge {
  """The item at the end of the edge."""
  node: Footer!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FooterManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FooterWhereInput!]

  """Logical OR on all given filters."""
  OR: [FooterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FooterWhereInput!]
  documentInStages_every: FooterWhereStageInput
  documentInStages_some: FooterWhereStageInput
  documentInStages_none: FooterWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  primaryLinks_every: PageWhereInput
  primaryLinks_some: PageWhereInput
  primaryLinks_none: PageWhereInput
  secondaryLinks_every: PageWhereInput
  secondaryLinks_some: PageWhereInput
  secondaryLinks_none: PageWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum FooterOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
}

input FooterUpdateInput {
  title: String
  slug: String
  primaryLinks: PageUpdateManyInlineInput
  secondaryLinks: PageUpdateManyInlineInput
  pages: PageUpdateManyInlineInput
}

input FooterUpdateManyInlineInput {
  """Create and connect multiple Footer documents"""
  create: [FooterCreateInput!]

  """Connect multiple existing Footer documents"""
  connect: [FooterConnectInput!]

  """
  Override currently-connected documents with multiple existing Footer documents
  """
  set: [FooterWhereUniqueInput!]

  """Update multiple Footer documents"""
  update: [FooterUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Footer documents"""
  upsert: [FooterUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Footer documents"""
  disconnect: [FooterWhereUniqueInput!]

  """Delete multiple Footer documents"""
  delete: [FooterWhereUniqueInput!]
}

input FooterUpdateManyInput {
  title: String
}

input FooterUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FooterWhereInput!

  """Update many input"""
  data: FooterUpdateManyInput!
}

input FooterUpdateOneInlineInput {
  """Create and connect one Footer document"""
  create: FooterCreateInput

  """Update single Footer document"""
  update: FooterUpdateWithNestedWhereUniqueInput

  """Upsert single Footer document"""
  upsert: FooterUpsertWithNestedWhereUniqueInput

  """Connect existing Footer document"""
  connect: FooterWhereUniqueInput

  """Disconnect currently connected Footer document"""
  disconnect: Boolean

  """Delete currently connected Footer document"""
  delete: Boolean
}

input FooterUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FooterWhereUniqueInput!

  """Document to update"""
  data: FooterUpdateInput!
}

input FooterUpsertInput {
  """Create document if it didn't exist"""
  create: FooterCreateInput!

  """Update document if it exists"""
  update: FooterUpdateInput!
}

input FooterUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FooterWhereUniqueInput!

  """Upsert data"""
  data: FooterUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input FooterWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input FooterWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FooterWhereInput!]

  """Logical OR on all given filters."""
  OR: [FooterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FooterWhereInput!]
  documentInStages_every: FooterWhereStageInput
  documentInStages_some: FooterWhereStageInput
  documentInStages_none: FooterWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  primaryLinks_every: PageWhereInput
  primaryLinks_some: PageWhereInput
  primaryLinks_none: PageWhereInput
  secondaryLinks_every: PageWhereInput
  secondaryLinks_some: PageWhereInput
  secondaryLinks_none: PageWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input FooterWhereStageInput {
  """Logical AND on all given filters."""
  AND: [FooterWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [FooterWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FooterWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: FooterWhereComparatorInput
}

"""References Footer record uniquely"""
input FooterWhereUniqueInput {
  id: ID
  slug: String
}

enum GridLayout {
  SPLIT
  STACK
}

enum GridTheme {
  WHITE
  LIGHT
  DARK
}

type Guide implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Guide!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Guide!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  slug: String!
  excerpt: String
  published: Date
  content: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Guide versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input GuideConnectInput {
  """Document to connect"""
  where: GuideWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type GuideConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuideEdge!]!
  aggregate: Aggregate!
}

input GuideCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """title input for default locale (en)"""
  title: String!
  slug: String!

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: GuideCreateLocalizationsInput
}

input GuideCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  excerpt: String
  content: String!
}

input GuideCreateLocalizationInput {
  """Localization input"""
  data: GuideCreateLocalizationDataInput!
  locale: Locale!
}

input GuideCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [GuideCreateLocalizationInput!]
}

input GuideCreateManyInlineInput {
  """Create and connect multiple existing Guide documents"""
  create: [GuideCreateInput!]

  """Connect multiple existing Guide documents"""
  connect: [GuideWhereUniqueInput!]
}

input GuideCreateOneInlineInput {
  """Create and connect one Guide document"""
  create: GuideCreateInput

  """Connect one existing Guide document"""
  connect: GuideWhereUniqueInput
}

"""An edge in a connection."""
type GuideEdge {
  """The item at the end of the edge."""
  node: Guide!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input GuideManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [GuideWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuideWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuideWhereInput!]
  documentInStages_every: GuideWhereStageInput
  documentInStages_some: GuideWhereStageInput
  documentInStages_none: GuideWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  published: Date

  """All values that are not equal to given value."""
  published_not: Date

  """All values that are contained in given list."""
  published_in: [Date]

  """All values that are not contained in given list."""
  published_not_in: [Date]

  """All values less than the given value."""
  published_lt: Date

  """All values less than or equal the given value."""
  published_lte: Date

  """All values greater than the given value."""
  published_gt: Date

  """All values greater than or equal the given value."""
  published_gte: Date
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum GuideOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  excerpt_ASC
  excerpt_DESC
  published_ASC
  published_DESC
  content_ASC
  content_DESC
}

input GuideUpdateInput {
  """title input for default locale (en)"""
  title: String
  slug: String

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String

  """Manage document localizations"""
  localizations: GuideUpdateLocalizationsInput
}

input GuideUpdateLocalizationDataInput {
  title: String
  excerpt: String
  content: String
}

input GuideUpdateLocalizationInput {
  data: GuideUpdateLocalizationDataInput!
  locale: Locale!
}

input GuideUpdateLocalizationsInput {
  """Localizations to create"""
  create: [GuideCreateLocalizationInput!]

  """Localizations to update"""
  update: [GuideUpdateLocalizationInput!]
  upsert: [GuideUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input GuideUpdateManyInlineInput {
  """Create and connect multiple Guide documents"""
  create: [GuideCreateInput!]

  """Connect multiple existing Guide documents"""
  connect: [GuideConnectInput!]

  """
  Override currently-connected documents with multiple existing Guide documents
  """
  set: [GuideWhereUniqueInput!]

  """Update multiple Guide documents"""
  update: [GuideUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Guide documents"""
  upsert: [GuideUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Guide documents"""
  disconnect: [GuideWhereUniqueInput!]

  """Delete multiple Guide documents"""
  delete: [GuideWhereUniqueInput!]
}

input GuideUpdateManyInput {
  """title input for default locale (en)"""
  title: String

  """excerpt input for default locale (en)"""
  excerpt: String
  published: Date

  """content input for default locale (en)"""
  content: String

  """Optional updates to localizations"""
  localizations: GuideUpdateManyLocalizationsInput
}

input GuideUpdateManyLocalizationDataInput {
  title: String
  excerpt: String
  content: String
}

input GuideUpdateManyLocalizationInput {
  data: GuideUpdateManyLocalizationDataInput!
  locale: Locale!
}

input GuideUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [GuideUpdateManyLocalizationInput!]
}

input GuideUpdateManyWithNestedWhereInput {
  """Document search"""
  where: GuideWhereInput!

  """Update many input"""
  data: GuideUpdateManyInput!
}

input GuideUpdateOneInlineInput {
  """Create and connect one Guide document"""
  create: GuideCreateInput

  """Update single Guide document"""
  update: GuideUpdateWithNestedWhereUniqueInput

  """Upsert single Guide document"""
  upsert: GuideUpsertWithNestedWhereUniqueInput

  """Connect existing Guide document"""
  connect: GuideWhereUniqueInput

  """Disconnect currently connected Guide document"""
  disconnect: Boolean

  """Delete currently connected Guide document"""
  delete: Boolean
}

input GuideUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: GuideWhereUniqueInput!

  """Document to update"""
  data: GuideUpdateInput!
}

input GuideUpsertInput {
  """Create document if it didn't exist"""
  create: GuideCreateInput!

  """Update document if it exists"""
  update: GuideUpdateInput!
}

input GuideUpsertLocalizationInput {
  update: GuideUpdateLocalizationDataInput!
  create: GuideCreateLocalizationDataInput!
  locale: Locale!
}

input GuideUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: GuideWhereUniqueInput!

  """Upsert data"""
  data: GuideUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input GuideWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input GuideWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [GuideWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuideWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuideWhereInput!]
  documentInStages_every: GuideWhereStageInput
  documentInStages_some: GuideWhereStageInput
  documentInStages_none: GuideWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  excerpt: String

  """All values that are not equal to given value."""
  excerpt_not: String

  """All values that are contained in given list."""
  excerpt_in: [String]

  """All values that are not contained in given list."""
  excerpt_not_in: [String]

  """All values containing the given string."""
  excerpt_contains: String

  """All values not containing the given string."""
  excerpt_not_contains: String

  """All values starting with the given string."""
  excerpt_starts_with: String

  """All values not starting with the given string."""
  excerpt_not_starts_with: String

  """All values ending with the given string."""
  excerpt_ends_with: String

  """All values not ending with the given string"""
  excerpt_not_ends_with: String
  published: Date

  """All values that are not equal to given value."""
  published_not: Date

  """All values that are contained in given list."""
  published_in: [Date]

  """All values that are not contained in given list."""
  published_not_in: [Date]

  """All values less than the given value."""
  published_lt: Date

  """All values less than or equal the given value."""
  published_lte: Date

  """All values greater than the given value."""
  published_gt: Date

  """All values greater than or equal the given value."""
  published_gte: Date
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String]

  """All values that are not contained in given list."""
  content_not_in: [String]

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string"""
  content_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input GuideWhereStageInput {
  """Logical AND on all given filters."""
  AND: [GuideWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [GuideWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuideWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: GuideWhereComparatorInput
}

"""References Guide record uniquely"""
input GuideWhereUniqueInput {
  id: ID
  slug: String
}

type Hero implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Hero!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  slug: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  image(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Hero versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input HeroConnectInput {
  """Document to connect"""
  where: HeroWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type HeroConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HeroEdge!]!
  aggregate: Aggregate!
}

input HeroCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  slug: String!
  image: AssetCreateOneInlineInput
  pages: PageCreateManyInlineInput
}

input HeroCreateManyInlineInput {
  """Create and connect multiple existing Hero documents"""
  create: [HeroCreateInput!]

  """Connect multiple existing Hero documents"""
  connect: [HeroWhereUniqueInput!]
}

input HeroCreateOneInlineInput {
  """Create and connect one Hero document"""
  create: HeroCreateInput

  """Connect one existing Hero document"""
  connect: HeroWhereUniqueInput
}

"""An edge in a connection."""
type HeroEdge {
  """The item at the end of the edge."""
  node: Hero!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input HeroManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [HeroWhereInput!]

  """Logical OR on all given filters."""
  OR: [HeroWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HeroWhereInput!]
  documentInStages_every: HeroWhereStageInput
  documentInStages_some: HeroWhereStageInput
  documentInStages_none: HeroWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum HeroOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
}

input HeroUpdateInput {
  slug: String
  image: AssetUpdateOneInlineInput
  pages: PageUpdateManyInlineInput
}

input HeroUpdateManyInlineInput {
  """Create and connect multiple Hero documents"""
  create: [HeroCreateInput!]

  """Connect multiple existing Hero documents"""
  connect: [HeroConnectInput!]

  """
  Override currently-connected documents with multiple existing Hero documents
  """
  set: [HeroWhereUniqueInput!]

  """Update multiple Hero documents"""
  update: [HeroUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Hero documents"""
  upsert: [HeroUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Hero documents"""
  disconnect: [HeroWhereUniqueInput!]

  """Delete multiple Hero documents"""
  delete: [HeroWhereUniqueInput!]
}

input HeroUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

input HeroUpdateManyWithNestedWhereInput {
  """Document search"""
  where: HeroWhereInput!

  """Update many input"""
  data: HeroUpdateManyInput!
}

input HeroUpdateOneInlineInput {
  """Create and connect one Hero document"""
  create: HeroCreateInput

  """Update single Hero document"""
  update: HeroUpdateWithNestedWhereUniqueInput

  """Upsert single Hero document"""
  upsert: HeroUpsertWithNestedWhereUniqueInput

  """Connect existing Hero document"""
  connect: HeroWhereUniqueInput

  """Disconnect currently connected Hero document"""
  disconnect: Boolean

  """Delete currently connected Hero document"""
  delete: Boolean
}

input HeroUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: HeroWhereUniqueInput!

  """Document to update"""
  data: HeroUpdateInput!
}

input HeroUpsertInput {
  """Create document if it didn't exist"""
  create: HeroCreateInput!

  """Update document if it exists"""
  update: HeroUpdateInput!
}

input HeroUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: HeroWhereUniqueInput!

  """Upsert data"""
  data: HeroUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input HeroWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input HeroWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [HeroWhereInput!]

  """Logical OR on all given filters."""
  OR: [HeroWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HeroWhereInput!]
  documentInStages_every: HeroWhereStageInput
  documentInStages_some: HeroWhereStageInput
  documentInStages_none: HeroWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input HeroWhereStageInput {
  """Logical AND on all given filters."""
  AND: [HeroWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [HeroWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HeroWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: HeroWhereComparatorInput
}

"""References Hero record uniquely"""
input HeroWhereUniqueInput {
  id: ID
  slug: String
}

scalar Hex

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any
  parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit the specified parameters exactly by scaling the image
  to the desired size. The aspect ratio of the image is not respected and the
  image can be distorted using this method.
  """
  scale

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  will not scale the image if the image is smaller than the output size.
  """
  max
}

input ImageResizeInput {
  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""Raw JSON value"""
scalar Json

"""Locale system enumeration"""
enum Locale {
  """System locale"""
  en
  de
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long
can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""Longform content for pages like privacy policy and terms of service."""
type Longform implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Longform!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Longform!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  body: String
  slug: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Longform versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input LongformConnectInput {
  """Document to connect"""
  where: LongformWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type LongformConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LongformEdge!]!
  aggregate: Aggregate!
}

input LongformCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!

  """body input for default locale (en)"""
  body: String
  slug: String!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: LongformCreateLocalizationsInput
}

input LongformCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  body: String
}

input LongformCreateLocalizationInput {
  """Localization input"""
  data: LongformCreateLocalizationDataInput!
  locale: Locale!
}

input LongformCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [LongformCreateLocalizationInput!]
}

input LongformCreateManyInlineInput {
  """Create and connect multiple existing Longform documents"""
  create: [LongformCreateInput!]

  """Connect multiple existing Longform documents"""
  connect: [LongformWhereUniqueInput!]
}

input LongformCreateOneInlineInput {
  """Create and connect one Longform document"""
  create: LongformCreateInput

  """Connect one existing Longform document"""
  connect: LongformWhereUniqueInput
}

"""An edge in a connection."""
type LongformEdge {
  """The item at the end of the edge."""
  node: Longform!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input LongformManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [LongformWhereInput!]

  """Logical OR on all given filters."""
  OR: [LongformWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LongformWhereInput!]
  documentInStages_every: LongformWhereStageInput
  documentInStages_some: LongformWhereStageInput
  documentInStages_none: LongformWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum LongformOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  slug_ASC
  slug_DESC
}

input LongformUpdateInput {
  title: String

  """body input for default locale (en)"""
  body: String
  slug: String

  """Manage document localizations"""
  localizations: LongformUpdateLocalizationsInput
}

input LongformUpdateLocalizationDataInput {
  body: String
}

input LongformUpdateLocalizationInput {
  data: LongformUpdateLocalizationDataInput!
  locale: Locale!
}

input LongformUpdateLocalizationsInput {
  """Localizations to create"""
  create: [LongformCreateLocalizationInput!]

  """Localizations to update"""
  update: [LongformUpdateLocalizationInput!]
  upsert: [LongformUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input LongformUpdateManyInlineInput {
  """Create and connect multiple Longform documents"""
  create: [LongformCreateInput!]

  """Connect multiple existing Longform documents"""
  connect: [LongformConnectInput!]

  """
  Override currently-connected documents with multiple existing Longform documents
  """
  set: [LongformWhereUniqueInput!]

  """Update multiple Longform documents"""
  update: [LongformUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Longform documents"""
  upsert: [LongformUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Longform documents"""
  disconnect: [LongformWhereUniqueInput!]

  """Delete multiple Longform documents"""
  delete: [LongformWhereUniqueInput!]
}

input LongformUpdateManyInput {
  title: String

  """body input for default locale (en)"""
  body: String

  """Optional updates to localizations"""
  localizations: LongformUpdateManyLocalizationsInput
}

input LongformUpdateManyLocalizationDataInput {
  body: String
}

input LongformUpdateManyLocalizationInput {
  data: LongformUpdateManyLocalizationDataInput!
  locale: Locale!
}

input LongformUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [LongformUpdateManyLocalizationInput!]
}

input LongformUpdateManyWithNestedWhereInput {
  """Document search"""
  where: LongformWhereInput!

  """Update many input"""
  data: LongformUpdateManyInput!
}

input LongformUpdateOneInlineInput {
  """Create and connect one Longform document"""
  create: LongformCreateInput

  """Update single Longform document"""
  update: LongformUpdateWithNestedWhereUniqueInput

  """Upsert single Longform document"""
  upsert: LongformUpsertWithNestedWhereUniqueInput

  """Connect existing Longform document"""
  connect: LongformWhereUniqueInput

  """Disconnect currently connected Longform document"""
  disconnect: Boolean

  """Delete currently connected Longform document"""
  delete: Boolean
}

input LongformUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: LongformWhereUniqueInput!

  """Document to update"""
  data: LongformUpdateInput!
}

input LongformUpsertInput {
  """Create document if it didn't exist"""
  create: LongformCreateInput!

  """Update document if it exists"""
  update: LongformUpdateInput!
}

input LongformUpsertLocalizationInput {
  update: LongformUpdateLocalizationDataInput!
  create: LongformCreateLocalizationDataInput!
  locale: Locale!
}

input LongformUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: LongformWhereUniqueInput!

  """Upsert data"""
  data: LongformUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input LongformWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input LongformWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [LongformWhereInput!]

  """Logical OR on all given filters."""
  OR: [LongformWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LongformWhereInput!]
  documentInStages_every: LongformWhereStageInput
  documentInStages_some: LongformWhereStageInput
  documentInStages_none: LongformWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String]

  """All values that are not contained in given list."""
  body_not_in: [String]

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string"""
  body_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input LongformWhereStageInput {
  """Logical AND on all given filters."""
  AND: [LongformWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [LongformWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LongformWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: LongformWhereComparatorInput
}

"""References Longform record uniquely"""
input LongformWhereUniqueInput {
  id: ID
  slug: String
}

type Mutation {
  """Create one stat"""
  createStat(data: StatCreateInput!): Stat

  """Update one stat"""
  updateStat(where: StatWhereUniqueInput!, data: StatUpdateInput!): Stat

  """Delete one stat from _all_ existing stages. Returns deleted document."""
  deleteStat(
    """Document to delete"""
    where: StatWhereUniqueInput!
  ): Stat

  """Upsert one stat"""
  upsertStat(where: StatWhereUniqueInput!, upsert: StatUpsertInput!): Stat

  """Publish one stat"""
  publishStat(
    """Document to publish"""
    where: StatWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Stat

  """
  Unpublish one stat from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishStat(
    """Document to unpublish"""
    where: StatWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Stat

  """Update many Stat documents"""
  updateManyStatsConnection(
    """Documents to apply update on"""
    where: StatManyWhereInput

    """Updates to document content"""
    data: StatUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): StatConnection!

  """Delete many Stat documents, return deleted documents"""
  deleteManyStatsConnection(
    """Documents to delete"""
    where: StatManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): StatConnection!

  """Publish many Stat documents"""
  publishManyStatsConnection(
    """Identifies documents in each stage to be published"""
    where: StatManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): StatConnection!

  """
  Find many Stat documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyStatsConnection(
    """Identifies documents in draft stage"""
    where: StatManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): StatConnection!

  """Update many stats"""
  updateManyStats(
    """Documents to apply update on"""
    where: StatManyWhereInput

    """Updates to document content"""
    data: StatUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyStatsConnection)")

  """Delete many Stat documents"""
  deleteManyStats(
    """Documents to delete"""
    where: StatManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyStatsConnection)")

  """Publish many Stat documents"""
  publishManyStats(
    """Identifies documents in each stage to be published"""
    where: StatManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyStatsConnection)")

  """Unpublish many Stat documents"""
  unpublishManyStats(
    """Identifies documents in each stage"""
    where: StatManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyStatsConnection)")

  """Schedule to publish one stat"""
  schedulePublishStat(
    """Document to publish"""
    where: StatWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Stat

  """
  Unpublish one stat from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishStat(
    """Document to unpublish"""
    where: StatWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Stat

  """Create one footer"""
  createFooter(data: FooterCreateInput!): Footer

  """Update one footer"""
  updateFooter(where: FooterWhereUniqueInput!, data: FooterUpdateInput!): Footer

  """
  Delete one footer from _all_ existing stages. Returns deleted document.
  """
  deleteFooter(
    """Document to delete"""
    where: FooterWhereUniqueInput!
  ): Footer

  """Upsert one footer"""
  upsertFooter(where: FooterWhereUniqueInput!, upsert: FooterUpsertInput!): Footer

  """Publish one footer"""
  publishFooter(
    """Document to publish"""
    where: FooterWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Footer

  """
  Unpublish one footer from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishFooter(
    """Document to unpublish"""
    where: FooterWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Footer

  """Update many Footer documents"""
  updateManyFootersConnection(
    """Documents to apply update on"""
    where: FooterManyWhereInput

    """Updates to document content"""
    data: FooterUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FooterConnection!

  """Delete many Footer documents, return deleted documents"""
  deleteManyFootersConnection(
    """Documents to delete"""
    where: FooterManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FooterConnection!

  """Publish many Footer documents"""
  publishManyFootersConnection(
    """Identifies documents in each stage to be published"""
    where: FooterManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FooterConnection!

  """
  Find many Footer documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFootersConnection(
    """Identifies documents in draft stage"""
    where: FooterManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FooterConnection!

  """Update many footers"""
  updateManyFooters(
    """Documents to apply update on"""
    where: FooterManyWhereInput

    """Updates to document content"""
    data: FooterUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFootersConnection)")

  """Delete many Footer documents"""
  deleteManyFooters(
    """Documents to delete"""
    where: FooterManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFootersConnection)")

  """Publish many Footer documents"""
  publishManyFooters(
    """Identifies documents in each stage to be published"""
    where: FooterManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFootersConnection)")

  """Unpublish many Footer documents"""
  unpublishManyFooters(
    """Identifies documents in each stage"""
    where: FooterManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFootersConnection)")

  """Schedule to publish one footer"""
  schedulePublishFooter(
    """Document to publish"""
    where: FooterWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Footer

  """
  Unpublish one footer from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishFooter(
    """Document to unpublish"""
    where: FooterWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Footer

  """Create one testimonial"""
  createTestimonial(data: TestimonialCreateInput!): Testimonial

  """Update one testimonial"""
  updateTestimonial(where: TestimonialWhereUniqueInput!, data: TestimonialUpdateInput!): Testimonial

  """
  Delete one testimonial from _all_ existing stages. Returns deleted document.
  """
  deleteTestimonial(
    """Document to delete"""
    where: TestimonialWhereUniqueInput!
  ): Testimonial

  """Upsert one testimonial"""
  upsertTestimonial(where: TestimonialWhereUniqueInput!, upsert: TestimonialUpsertInput!): Testimonial

  """Publish one testimonial"""
  publishTestimonial(
    """Document to publish"""
    where: TestimonialWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Testimonial

  """
  Unpublish one testimonial from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishTestimonial(
    """Document to unpublish"""
    where: TestimonialWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Testimonial

  """Update many Testimonial documents"""
  updateManyTestimonialsConnection(
    """Documents to apply update on"""
    where: TestimonialManyWhereInput

    """Updates to document content"""
    data: TestimonialUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): TestimonialConnection!

  """Delete many Testimonial documents, return deleted documents"""
  deleteManyTestimonialsConnection(
    """Documents to delete"""
    where: TestimonialManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): TestimonialConnection!

  """Publish many Testimonial documents"""
  publishManyTestimonialsConnection(
    """Identifies documents in each stage to be published"""
    where: TestimonialManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): TestimonialConnection!

  """
  Find many Testimonial documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyTestimonialsConnection(
    """Identifies documents in draft stage"""
    where: TestimonialManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): TestimonialConnection!

  """Update many testimonials"""
  updateManyTestimonials(
    """Documents to apply update on"""
    where: TestimonialManyWhereInput

    """Updates to document content"""
    data: TestimonialUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyTestimonialsConnection)")

  """Delete many Testimonial documents"""
  deleteManyTestimonials(
    """Documents to delete"""
    where: TestimonialManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyTestimonialsConnection)")

  """Publish many Testimonial documents"""
  publishManyTestimonials(
    """Identifies documents in each stage to be published"""
    where: TestimonialManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyTestimonialsConnection)")

  """Unpublish many Testimonial documents"""
  unpublishManyTestimonials(
    """Identifies documents in each stage"""
    where: TestimonialManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyTestimonialsConnection)")

  """Schedule to publish one testimonial"""
  schedulePublishTestimonial(
    """Document to publish"""
    where: TestimonialWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Testimonial

  """
  Unpublish one testimonial from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishTestimonial(
    """Document to unpublish"""
    where: TestimonialWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Testimonial

  """Create one blogPost"""
  createBlogPost(data: BlogPostCreateInput!): BlogPost

  """Update one blogPost"""
  updateBlogPost(where: BlogPostWhereUniqueInput!, data: BlogPostUpdateInput!): BlogPost

  """
  Delete one blogPost from _all_ existing stages. Returns deleted document.
  """
  deleteBlogPost(
    """Document to delete"""
    where: BlogPostWhereUniqueInput!
  ): BlogPost

  """Upsert one blogPost"""
  upsertBlogPost(where: BlogPostWhereUniqueInput!, upsert: BlogPostUpsertInput!): BlogPost

  """Publish one blogPost"""
  publishBlogPost(
    """Document to publish"""
    where: BlogPostWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): BlogPost

  """
  Unpublish one blogPost from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishBlogPost(
    """Document to unpublish"""
    where: BlogPostWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): BlogPost

  """Update many BlogPost documents"""
  updateManyBlogPostsConnection(
    """Documents to apply update on"""
    where: BlogPostManyWhereInput

    """Updates to document content"""
    data: BlogPostUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): BlogPostConnection!

  """Delete many BlogPost documents, return deleted documents"""
  deleteManyBlogPostsConnection(
    """Documents to delete"""
    where: BlogPostManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): BlogPostConnection!

  """Publish many BlogPost documents"""
  publishManyBlogPostsConnection(
    """Identifies documents in each stage to be published"""
    where: BlogPostManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BlogPostConnection!

  """
  Find many BlogPost documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyBlogPostsConnection(
    """Identifies documents in draft stage"""
    where: BlogPostManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BlogPostConnection!

  """Update many blogPosts"""
  updateManyBlogPosts(
    """Documents to apply update on"""
    where: BlogPostManyWhereInput

    """Updates to document content"""
    data: BlogPostUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyBlogPostsConnection)")

  """Delete many BlogPost documents"""
  deleteManyBlogPosts(
    """Documents to delete"""
    where: BlogPostManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyBlogPostsConnection)")

  """Publish many BlogPost documents"""
  publishManyBlogPosts(
    """Identifies documents in each stage to be published"""
    where: BlogPostManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyBlogPostsConnection)")

  """Unpublish many BlogPost documents"""
  unpublishManyBlogPosts(
    """Identifies documents in each stage"""
    where: BlogPostManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyBlogPostsConnection)")

  """Schedule to publish one blogPost"""
  schedulePublishBlogPost(
    """Document to publish"""
    where: BlogPostWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): BlogPost

  """
  Unpublish one blogPost from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishBlogPost(
    """Document to unpublish"""
    where: BlogPostWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): BlogPost

  """Create one feature"""
  createFeature(data: FeatureCreateInput!): Feature

  """Update one feature"""
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature

  """
  Delete one feature from _all_ existing stages. Returns deleted document.
  """
  deleteFeature(
    """Document to delete"""
    where: FeatureWhereUniqueInput!
  ): Feature

  """Upsert one feature"""
  upsertFeature(where: FeatureWhereUniqueInput!, upsert: FeatureUpsertInput!): Feature

  """Publish one feature"""
  publishFeature(
    """Document to publish"""
    where: FeatureWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Feature

  """
  Unpublish one feature from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishFeature(
    """Document to unpublish"""
    where: FeatureWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Feature

  """Update many Feature documents"""
  updateManyFeaturesConnection(
    """Documents to apply update on"""
    where: FeatureManyWhereInput

    """Updates to document content"""
    data: FeatureUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FeatureConnection!

  """Delete many Feature documents, return deleted documents"""
  deleteManyFeaturesConnection(
    """Documents to delete"""
    where: FeatureManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FeatureConnection!

  """Publish many Feature documents"""
  publishManyFeaturesConnection(
    """Identifies documents in each stage to be published"""
    where: FeatureManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): FeatureConnection!

  """
  Find many Feature documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFeaturesConnection(
    """Identifies documents in draft stage"""
    where: FeatureManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): FeatureConnection!

  """Update many features"""
  updateManyFeatures(
    """Documents to apply update on"""
    where: FeatureManyWhereInput

    """Updates to document content"""
    data: FeatureUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFeaturesConnection)")

  """Delete many Feature documents"""
  deleteManyFeatures(
    """Documents to delete"""
    where: FeatureManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFeaturesConnection)")

  """Publish many Feature documents"""
  publishManyFeatures(
    """Identifies documents in each stage to be published"""
    where: FeatureManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFeaturesConnection)")

  """Unpublish many Feature documents"""
  unpublishManyFeatures(
    """Identifies documents in each stage"""
    where: FeatureManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFeaturesConnection)")

  """Schedule to publish one feature"""
  schedulePublishFeature(
    """Document to publish"""
    where: FeatureWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Feature

  """
  Unpublish one feature from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishFeature(
    """Document to unpublish"""
    where: FeatureWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Feature

  """Create one hero"""
  createHero(data: HeroCreateInput!): Hero

  """Update one hero"""
  updateHero(where: HeroWhereUniqueInput!, data: HeroUpdateInput!): Hero

  """Delete one hero from _all_ existing stages. Returns deleted document."""
  deleteHero(
    """Document to delete"""
    where: HeroWhereUniqueInput!
  ): Hero

  """Upsert one hero"""
  upsertHero(where: HeroWhereUniqueInput!, upsert: HeroUpsertInput!): Hero

  """Publish one hero"""
  publishHero(
    """Document to publish"""
    where: HeroWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Hero

  """
  Unpublish one hero from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishHero(
    """Document to unpublish"""
    where: HeroWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Hero

  """Update many Hero documents"""
  updateManyHeroesConnection(
    """Documents to apply update on"""
    where: HeroManyWhereInput

    """Updates to document content"""
    data: HeroUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): HeroConnection!

  """Delete many Hero documents, return deleted documents"""
  deleteManyHeroesConnection(
    """Documents to delete"""
    where: HeroManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): HeroConnection!

  """Publish many Hero documents"""
  publishManyHeroesConnection(
    """Identifies documents in each stage to be published"""
    where: HeroManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): HeroConnection!

  """
  Find many Hero documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyHeroesConnection(
    """Identifies documents in draft stage"""
    where: HeroManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): HeroConnection!

  """Update many heroes"""
  updateManyHeroes(
    """Documents to apply update on"""
    where: HeroManyWhereInput

    """Updates to document content"""
    data: HeroUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyHeroesConnection)")

  """Delete many Hero documents"""
  deleteManyHeroes(
    """Documents to delete"""
    where: HeroManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyHeroesConnection)")

  """Publish many Hero documents"""
  publishManyHeroes(
    """Identifies documents in each stage to be published"""
    where: HeroManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyHeroesConnection)")

  """Unpublish many Hero documents"""
  unpublishManyHeroes(
    """Identifies documents in each stage"""
    where: HeroManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyHeroesConnection)")

  """Schedule to publish one hero"""
  schedulePublishHero(
    """Document to publish"""
    where: HeroWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Hero

  """
  Unpublish one hero from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishHero(
    """Document to unpublish"""
    where: HeroWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Hero

  """Create one navigation"""
  createNavigation(data: NavigationCreateInput!): Navigation

  """Update one navigation"""
  updateNavigation(where: NavigationWhereUniqueInput!, data: NavigationUpdateInput!): Navigation

  """
  Delete one navigation from _all_ existing stages. Returns deleted document.
  """
  deleteNavigation(
    """Document to delete"""
    where: NavigationWhereUniqueInput!
  ): Navigation

  """Upsert one navigation"""
  upsertNavigation(where: NavigationWhereUniqueInput!, upsert: NavigationUpsertInput!): Navigation

  """Publish one navigation"""
  publishNavigation(
    """Document to publish"""
    where: NavigationWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Navigation

  """
  Unpublish one navigation from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishNavigation(
    """Document to unpublish"""
    where: NavigationWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Navigation

  """Update many Navigation documents"""
  updateManyNavigationsConnection(
    """Documents to apply update on"""
    where: NavigationManyWhereInput

    """Updates to document content"""
    data: NavigationUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): NavigationConnection!

  """Delete many Navigation documents, return deleted documents"""
  deleteManyNavigationsConnection(
    """Documents to delete"""
    where: NavigationManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): NavigationConnection!

  """Publish many Navigation documents"""
  publishManyNavigationsConnection(
    """Identifies documents in each stage to be published"""
    where: NavigationManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): NavigationConnection!

  """
  Find many Navigation documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyNavigationsConnection(
    """Identifies documents in draft stage"""
    where: NavigationManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): NavigationConnection!

  """Update many navigations"""
  updateManyNavigations(
    """Documents to apply update on"""
    where: NavigationManyWhereInput

    """Updates to document content"""
    data: NavigationUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyNavigationsConnection)")

  """Delete many Navigation documents"""
  deleteManyNavigations(
    """Documents to delete"""
    where: NavigationManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyNavigationsConnection)")

  """Publish many Navigation documents"""
  publishManyNavigations(
    """Identifies documents in each stage to be published"""
    where: NavigationManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyNavigationsConnection)")

  """Unpublish many Navigation documents"""
  unpublishManyNavigations(
    """Identifies documents in each stage"""
    where: NavigationManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyNavigationsConnection)")

  """Schedule to publish one navigation"""
  schedulePublishNavigation(
    """Document to publish"""
    where: NavigationWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Navigation

  """
  Unpublish one navigation from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishNavigation(
    """Document to unpublish"""
    where: NavigationWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Navigation

  """Create one page"""
  createPage(data: PageCreateInput!): Page

  """Update one page"""
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page

  """Delete one page from _all_ existing stages. Returns deleted document."""
  deletePage(
    """Document to delete"""
    where: PageWhereUniqueInput!
  ): Page

  """Upsert one page"""
  upsertPage(where: PageWhereUniqueInput!, upsert: PageUpsertInput!): Page

  """Publish one page"""
  publishPage(
    """Document to publish"""
    where: PageWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Page

  """
  Unpublish one page from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishPage(
    """Document to unpublish"""
    where: PageWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Page

  """Update many Page documents"""
  updateManyPagesConnection(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Delete many Page documents, return deleted documents"""
  deleteManyPagesConnection(
    """Documents to delete"""
    where: PageManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Publish many Page documents"""
  publishManyPagesConnection(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): PageConnection!

  """
  Find many Page documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPagesConnection(
    """Identifies documents in draft stage"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): PageConnection!

  """Update many pages"""
  updateManyPages(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPagesConnection)")

  """Delete many Page documents"""
  deleteManyPages(
    """Documents to delete"""
    where: PageManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPagesConnection)")

  """Publish many Page documents"""
  publishManyPages(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPagesConnection)")

  """Unpublish many Page documents"""
  unpublishManyPages(
    """Identifies documents in each stage"""
    where: PageManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPagesConnection)")

  """Schedule to publish one page"""
  schedulePublishPage(
    """Document to publish"""
    where: PageWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Page

  """
  Unpublish one page from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishPage(
    """Document to unpublish"""
    where: PageWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Page

  """Create one person"""
  createPerson(data: PersonCreateInput!): Person

  """Update one person"""
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person

  """
  Delete one person from _all_ existing stages. Returns deleted document.
  """
  deletePerson(
    """Document to delete"""
    where: PersonWhereUniqueInput!
  ): Person

  """Upsert one person"""
  upsertPerson(where: PersonWhereUniqueInput!, upsert: PersonUpsertInput!): Person

  """Publish one person"""
  publishPerson(
    """Document to publish"""
    where: PersonWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Person

  """
  Unpublish one person from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishPerson(
    """Document to unpublish"""
    where: PersonWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Person

  """Update many Person documents"""
  updateManyPeopleConnection(
    """Documents to apply update on"""
    where: PersonManyWhereInput

    """Updates to document content"""
    data: PersonUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PersonConnection!

  """Delete many Person documents, return deleted documents"""
  deleteManyPeopleConnection(
    """Documents to delete"""
    where: PersonManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PersonConnection!

  """Publish many Person documents"""
  publishManyPeopleConnection(
    """Identifies documents in each stage to be published"""
    where: PersonManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PersonConnection!

  """
  Find many Person documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPeopleConnection(
    """Identifies documents in draft stage"""
    where: PersonManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PersonConnection!

  """Update many people"""
  updateManyPeople(
    """Documents to apply update on"""
    where: PersonManyWhereInput

    """Updates to document content"""
    data: PersonUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPeopleConnection)")

  """Delete many Person documents"""
  deleteManyPeople(
    """Documents to delete"""
    where: PersonManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPeopleConnection)")

  """Publish many Person documents"""
  publishManyPeople(
    """Identifies documents in each stage to be published"""
    where: PersonManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPeopleConnection)")

  """Unpublish many Person documents"""
  unpublishManyPeople(
    """Identifies documents in each stage"""
    where: PersonManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPeopleConnection)")

  """Schedule to publish one person"""
  schedulePublishPerson(
    """Document to publish"""
    where: PersonWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Person

  """
  Unpublish one person from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishPerson(
    """Document to unpublish"""
    where: PersonWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Person

  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")

  """Update one asset"""
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Upsert one asset"""
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset

  """Publish one asset"""
  publishAsset(
    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Asset

  """
  Unpublish one asset from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishAsset(
    """Document to unpublish"""
    where: AssetWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Asset

  """Update many Asset documents"""
  updateManyAssetsConnection(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    """Documents to delete"""
    where: AssetManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): AssetConnection!

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    """Identifies documents in draft stage"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): AssetConnection!

  """Update many assets"""
  updateManyAssets(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")

  """Publish many Asset documents"""
  publishManyAssets(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Identifies documents in each stage"""
    where: AssetManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")

  """Schedule to publish one asset"""
  schedulePublishAsset(
    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Asset

  """
  Unpublish one asset from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishAsset(
    """Document to unpublish"""
    where: AssetWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Asset

  """Create one seo"""
  createSeo(data: SeoCreateInput!): Seo

  """Update one seo"""
  updateSeo(where: SeoWhereUniqueInput!, data: SeoUpdateInput!): Seo

  """Delete one seo from _all_ existing stages. Returns deleted document."""
  deleteSeo(
    """Document to delete"""
    where: SeoWhereUniqueInput!
  ): Seo

  """Upsert one seo"""
  upsertSeo(where: SeoWhereUniqueInput!, upsert: SeoUpsertInput!): Seo

  """Publish one seo"""
  publishSeo(
    """Document to publish"""
    where: SeoWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Seo

  """
  Unpublish one seo from selected stages. Unpublish either the complete document
  with its relations, localizations and base data or specific localizations only.
  """
  unpublishSeo(
    """Document to unpublish"""
    where: SeoWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Seo

  """Update many Seo documents"""
  updateManySeosConnection(
    """Documents to apply update on"""
    where: SeoManyWhereInput

    """Updates to document content"""
    data: SeoUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SeoConnection!

  """Delete many Seo documents, return deleted documents"""
  deleteManySeosConnection(
    """Documents to delete"""
    where: SeoManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SeoConnection!

  """Publish many Seo documents"""
  publishManySeosConnection(
    """Identifies documents in each stage to be published"""
    where: SeoManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SeoConnection!

  """
  Find many Seo documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManySeosConnection(
    """Identifies documents in draft stage"""
    where: SeoManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SeoConnection!

  """Update many seos"""
  updateManySeos(
    """Documents to apply update on"""
    where: SeoManyWhereInput

    """Updates to document content"""
    data: SeoUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManySeosConnection)")

  """Delete many Seo documents"""
  deleteManySeos(
    """Documents to delete"""
    where: SeoManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManySeosConnection)")

  """Publish many Seo documents"""
  publishManySeos(
    """Identifies documents in each stage to be published"""
    where: SeoManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManySeosConnection)")

  """Unpublish many Seo documents"""
  unpublishManySeos(
    """Identifies documents in each stage"""
    where: SeoManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManySeosConnection)")

  """Schedule to publish one seo"""
  schedulePublishSeo(
    """Document to publish"""
    where: SeoWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Seo

  """
  Unpublish one seo from selected stages. Unpublish either the complete document
  with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishSeo(
    """Document to unpublish"""
    where: SeoWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Seo

  """Create one popUp"""
  createPopUp(data: PopUpCreateInput!): PopUp

  """Update one popUp"""
  updatePopUp(where: PopUpWhereUniqueInput!, data: PopUpUpdateInput!): PopUp

  """Delete one popUp from _all_ existing stages. Returns deleted document."""
  deletePopUp(
    """Document to delete"""
    where: PopUpWhereUniqueInput!
  ): PopUp

  """Upsert one popUp"""
  upsertPopUp(where: PopUpWhereUniqueInput!, upsert: PopUpUpsertInput!): PopUp

  """Publish one popUp"""
  publishPopUp(
    """Document to publish"""
    where: PopUpWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): PopUp

  """
  Unpublish one popUp from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishPopUp(
    """Document to unpublish"""
    where: PopUpWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): PopUp

  """Update many PopUp documents"""
  updateManyPopUpsConnection(
    """Documents to apply update on"""
    where: PopUpManyWhereInput

    """Updates to document content"""
    data: PopUpUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PopUpConnection!

  """Delete many PopUp documents, return deleted documents"""
  deleteManyPopUpsConnection(
    """Documents to delete"""
    where: PopUpManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PopUpConnection!

  """Publish many PopUp documents"""
  publishManyPopUpsConnection(
    """Identifies documents in each stage to be published"""
    where: PopUpManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PopUpConnection!

  """
  Find many PopUp documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPopUpsConnection(
    """Identifies documents in draft stage"""
    where: PopUpManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PopUpConnection!

  """Update many popUps"""
  updateManyPopUps(
    """Documents to apply update on"""
    where: PopUpManyWhereInput

    """Updates to document content"""
    data: PopUpUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPopUpsConnection)")

  """Delete many PopUp documents"""
  deleteManyPopUps(
    """Documents to delete"""
    where: PopUpManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPopUpsConnection)")

  """Publish many PopUp documents"""
  publishManyPopUps(
    """Identifies documents in each stage to be published"""
    where: PopUpManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPopUpsConnection)")

  """Unpublish many PopUp documents"""
  unpublishManyPopUps(
    """Identifies documents in each stage"""
    where: PopUpManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPopUpsConnection)")

  """Schedule to publish one popUp"""
  schedulePublishPopUp(
    """Document to publish"""
    where: PopUpWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): PopUp

  """
  Unpublish one popUp from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishPopUp(
    """Document to unpublish"""
    where: PopUpWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): PopUp

  """Delete and return scheduled operation"""
  deleteScheduledOperation(
    """Document to delete"""
    where: ScheduledOperationWhereUniqueInput!
  ): ScheduledOperation

  """Create one scheduledRelease"""
  createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease

  """Update one scheduledRelease"""
  updateScheduledRelease(where: ScheduledReleaseWhereUniqueInput!, data: ScheduledReleaseUpdateInput!): ScheduledRelease

  """
  Delete one scheduledRelease from _all_ existing stages. Returns deleted document.
  """
  deleteScheduledRelease(
    """Document to delete"""
    where: ScheduledReleaseWhereUniqueInput!
  ): ScheduledRelease

  """Create one copy"""
  createCopy(data: CopyCreateInput!): Copy

  """Update one copy"""
  updateCopy(where: CopyWhereUniqueInput!, data: CopyUpdateInput!): Copy

  """Delete one copy from _all_ existing stages. Returns deleted document."""
  deleteCopy(
    """Document to delete"""
    where: CopyWhereUniqueInput!
  ): Copy

  """Upsert one copy"""
  upsertCopy(where: CopyWhereUniqueInput!, upsert: CopyUpsertInput!): Copy

  """Publish one copy"""
  publishCopy(
    """Document to publish"""
    where: CopyWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Copy

  """
  Unpublish one copy from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishCopy(
    """Document to unpublish"""
    where: CopyWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Copy

  """Update many Copy documents"""
  updateManyCopiesConnection(
    """Documents to apply update on"""
    where: CopyManyWhereInput

    """Updates to document content"""
    data: CopyUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CopyConnection!

  """Delete many Copy documents, return deleted documents"""
  deleteManyCopiesConnection(
    """Documents to delete"""
    where: CopyManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CopyConnection!

  """Publish many Copy documents"""
  publishManyCopiesConnection(
    """Identifies documents in each stage to be published"""
    where: CopyManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CopyConnection!

  """
  Find many Copy documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyCopiesConnection(
    """Identifies documents in draft stage"""
    where: CopyManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CopyConnection!

  """Update many copies"""
  updateManyCopies(
    """Documents to apply update on"""
    where: CopyManyWhereInput

    """Updates to document content"""
    data: CopyUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCopiesConnection)")

  """Delete many Copy documents"""
  deleteManyCopies(
    """Documents to delete"""
    where: CopyManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCopiesConnection)")

  """Publish many Copy documents"""
  publishManyCopies(
    """Identifies documents in each stage to be published"""
    where: CopyManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCopiesConnection)")

  """Unpublish many Copy documents"""
  unpublishManyCopies(
    """Identifies documents in each stage"""
    where: CopyManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCopiesConnection)")

  """Schedule to publish one copy"""
  schedulePublishCopy(
    """Document to publish"""
    where: CopyWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Copy

  """
  Unpublish one copy from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishCopy(
    """Document to unpublish"""
    where: CopyWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Copy

  """Create one guide"""
  createGuide(data: GuideCreateInput!): Guide

  """Update one guide"""
  updateGuide(where: GuideWhereUniqueInput!, data: GuideUpdateInput!): Guide

  """Delete one guide from _all_ existing stages. Returns deleted document."""
  deleteGuide(
    """Document to delete"""
    where: GuideWhereUniqueInput!
  ): Guide

  """Upsert one guide"""
  upsertGuide(where: GuideWhereUniqueInput!, upsert: GuideUpsertInput!): Guide

  """Publish one guide"""
  publishGuide(
    """Document to publish"""
    where: GuideWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Guide

  """
  Unpublish one guide from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishGuide(
    """Document to unpublish"""
    where: GuideWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Guide

  """Update many Guide documents"""
  updateManyGuidesConnection(
    """Documents to apply update on"""
    where: GuideManyWhereInput

    """Updates to document content"""
    data: GuideUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): GuideConnection!

  """Delete many Guide documents, return deleted documents"""
  deleteManyGuidesConnection(
    """Documents to delete"""
    where: GuideManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): GuideConnection!

  """Publish many Guide documents"""
  publishManyGuidesConnection(
    """Identifies documents in each stage to be published"""
    where: GuideManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): GuideConnection!

  """
  Find many Guide documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyGuidesConnection(
    """Identifies documents in draft stage"""
    where: GuideManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): GuideConnection!

  """Update many guides"""
  updateManyGuides(
    """Documents to apply update on"""
    where: GuideManyWhereInput

    """Updates to document content"""
    data: GuideUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyGuidesConnection)")

  """Delete many Guide documents"""
  deleteManyGuides(
    """Documents to delete"""
    where: GuideManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyGuidesConnection)")

  """Publish many Guide documents"""
  publishManyGuides(
    """Identifies documents in each stage to be published"""
    where: GuideManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyGuidesConnection)")

  """Unpublish many Guide documents"""
  unpublishManyGuides(
    """Identifies documents in each stage"""
    where: GuideManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyGuidesConnection)")

  """Schedule to publish one guide"""
  schedulePublishGuide(
    """Document to publish"""
    where: GuideWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Guide

  """
  Unpublish one guide from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishGuide(
    """Document to unpublish"""
    where: GuideWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Guide

  """Create one event"""
  createEvent(data: EventCreateInput!): Event

  """Update one event"""
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event

  """Delete one event from _all_ existing stages. Returns deleted document."""
  deleteEvent(
    """Document to delete"""
    where: EventWhereUniqueInput!
  ): Event

  """Upsert one event"""
  upsertEvent(where: EventWhereUniqueInput!, upsert: EventUpsertInput!): Event

  """Publish one event"""
  publishEvent(
    """Document to publish"""
    where: EventWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Event

  """
  Unpublish one event from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishEvent(
    """Document to unpublish"""
    where: EventWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Event

  """Update many Event documents"""
  updateManyEventsConnection(
    """Documents to apply update on"""
    where: EventManyWhereInput

    """Updates to document content"""
    data: EventUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): EventConnection!

  """Delete many Event documents, return deleted documents"""
  deleteManyEventsConnection(
    """Documents to delete"""
    where: EventManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): EventConnection!

  """Publish many Event documents"""
  publishManyEventsConnection(
    """Identifies documents in each stage to be published"""
    where: EventManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): EventConnection!

  """
  Find many Event documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyEventsConnection(
    """Identifies documents in draft stage"""
    where: EventManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): EventConnection!

  """Update many events"""
  updateManyEvents(
    """Documents to apply update on"""
    where: EventManyWhereInput

    """Updates to document content"""
    data: EventUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyEventsConnection)")

  """Delete many Event documents"""
  deleteManyEvents(
    """Documents to delete"""
    where: EventManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyEventsConnection)")

  """Publish many Event documents"""
  publishManyEvents(
    """Identifies documents in each stage to be published"""
    where: EventManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyEventsConnection)")

  """Unpublish many Event documents"""
  unpublishManyEvents(
    """Identifies documents in each stage"""
    where: EventManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyEventsConnection)")

  """Schedule to publish one event"""
  schedulePublishEvent(
    """Document to publish"""
    where: EventWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Event

  """
  Unpublish one event from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishEvent(
    """Document to unpublish"""
    where: EventWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Event

  """Create one longform"""
  createLongform(data: LongformCreateInput!): Longform

  """Update one longform"""
  updateLongform(where: LongformWhereUniqueInput!, data: LongformUpdateInput!): Longform

  """
  Delete one longform from _all_ existing stages. Returns deleted document.
  """
  deleteLongform(
    """Document to delete"""
    where: LongformWhereUniqueInput!
  ): Longform

  """Upsert one longform"""
  upsertLongform(where: LongformWhereUniqueInput!, upsert: LongformUpsertInput!): Longform

  """Publish one longform"""
  publishLongform(
    """Document to publish"""
    where: LongformWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Longform

  """
  Unpublish one longform from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishLongform(
    """Document to unpublish"""
    where: LongformWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Longform

  """Update many Longform documents"""
  updateManyLongformsConnection(
    """Documents to apply update on"""
    where: LongformManyWhereInput

    """Updates to document content"""
    data: LongformUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LongformConnection!

  """Delete many Longform documents, return deleted documents"""
  deleteManyLongformsConnection(
    """Documents to delete"""
    where: LongformManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LongformConnection!

  """Publish many Longform documents"""
  publishManyLongformsConnection(
    """Identifies documents in each stage to be published"""
    where: LongformManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): LongformConnection!

  """
  Find many Longform documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyLongformsConnection(
    """Identifies documents in draft stage"""
    where: LongformManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): LongformConnection!

  """Update many longforms"""
  updateManyLongforms(
    """Documents to apply update on"""
    where: LongformManyWhereInput

    """Updates to document content"""
    data: LongformUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyLongformsConnection)")

  """Delete many Longform documents"""
  deleteManyLongforms(
    """Documents to delete"""
    where: LongformManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyLongformsConnection)")

  """Publish many Longform documents"""
  publishManyLongforms(
    """Identifies documents in each stage to be published"""
    where: LongformManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyLongformsConnection)")

  """Unpublish many Longform documents"""
  unpublishManyLongforms(
    """Identifies documents in each stage"""
    where: LongformManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyLongformsConnection)")

  """Schedule to publish one longform"""
  schedulePublishLongform(
    """Document to publish"""
    where: LongformWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Longform

  """
  Unpublish one longform from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishLongform(
    """Document to unpublish"""
    where: LongformWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Longform

  """Create one processor"""
  createProcessor(data: ProcessorCreateInput!): Processor

  """Update one processor"""
  updateProcessor(where: ProcessorWhereUniqueInput!, data: ProcessorUpdateInput!): Processor

  """
  Delete one processor from _all_ existing stages. Returns deleted document.
  """
  deleteProcessor(
    """Document to delete"""
    where: ProcessorWhereUniqueInput!
  ): Processor

  """Upsert one processor"""
  upsertProcessor(where: ProcessorWhereUniqueInput!, upsert: ProcessorUpsertInput!): Processor

  """Publish one processor"""
  publishProcessor(
    """Document to publish"""
    where: ProcessorWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Processor

  """
  Unpublish one processor from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishProcessor(
    """Document to unpublish"""
    where: ProcessorWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Processor

  """Update many Processor documents"""
  updateManyProcessorsConnection(
    """Documents to apply update on"""
    where: ProcessorManyWhereInput

    """Updates to document content"""
    data: ProcessorUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ProcessorConnection!

  """Delete many Processor documents, return deleted documents"""
  deleteManyProcessorsConnection(
    """Documents to delete"""
    where: ProcessorManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ProcessorConnection!

  """Publish many Processor documents"""
  publishManyProcessorsConnection(
    """Identifies documents in each stage to be published"""
    where: ProcessorManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ProcessorConnection!

  """
  Find many Processor documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyProcessorsConnection(
    """Identifies documents in draft stage"""
    where: ProcessorManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ProcessorConnection!

  """Update many processors"""
  updateManyProcessors(
    """Documents to apply update on"""
    where: ProcessorManyWhereInput

    """Updates to document content"""
    data: ProcessorUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyProcessorsConnection)")

  """Delete many Processor documents"""
  deleteManyProcessors(
    """Documents to delete"""
    where: ProcessorManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyProcessorsConnection)")

  """Publish many Processor documents"""
  publishManyProcessors(
    """Identifies documents in each stage to be published"""
    where: ProcessorManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyProcessorsConnection)")

  """Unpublish many Processor documents"""
  unpublishManyProcessors(
    """Identifies documents in each stage"""
    where: ProcessorManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyProcessorsConnection)")

  """Schedule to publish one processor"""
  schedulePublishProcessor(
    """Document to publish"""
    where: ProcessorWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Processor

  """
  Unpublish one processor from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  scheduleUnpublishProcessor(
    """Document to unpublish"""
    where: ProcessorWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String
  ): Processor
}

type Navigation implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Navigation!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  slug: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `pages` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Navigation versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input NavigationConnectInput {
  """Document to connect"""
  where: NavigationWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type NavigationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NavigationEdge!]!
  aggregate: Aggregate!
}

input NavigationCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  slug: String!
  pages: PageCreateManyInlineInput
}

input NavigationCreateManyInlineInput {
  """Create and connect multiple existing Navigation documents"""
  create: [NavigationCreateInput!]

  """Connect multiple existing Navigation documents"""
  connect: [NavigationWhereUniqueInput!]
}

input NavigationCreateOneInlineInput {
  """Create and connect one Navigation document"""
  create: NavigationCreateInput

  """Connect one existing Navigation document"""
  connect: NavigationWhereUniqueInput
}

"""An edge in a connection."""
type NavigationEdge {
  """The item at the end of the edge."""
  node: Navigation!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input NavigationManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [NavigationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationWhereInput!]
  documentInStages_every: NavigationWhereStageInput
  documentInStages_some: NavigationWhereStageInput
  documentInStages_none: NavigationWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum NavigationOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
}

input NavigationUpdateInput {
  title: String
  slug: String
  pages: PageUpdateManyInlineInput
}

input NavigationUpdateManyInlineInput {
  """Create and connect multiple Navigation documents"""
  create: [NavigationCreateInput!]

  """Connect multiple existing Navigation documents"""
  connect: [NavigationConnectInput!]

  """
  Override currently-connected documents with multiple existing Navigation documents
  """
  set: [NavigationWhereUniqueInput!]

  """Update multiple Navigation documents"""
  update: [NavigationUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Navigation documents"""
  upsert: [NavigationUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Navigation documents"""
  disconnect: [NavigationWhereUniqueInput!]

  """Delete multiple Navigation documents"""
  delete: [NavigationWhereUniqueInput!]
}

input NavigationUpdateManyInput {
  title: String
}

input NavigationUpdateManyWithNestedWhereInput {
  """Document search"""
  where: NavigationWhereInput!

  """Update many input"""
  data: NavigationUpdateManyInput!
}

input NavigationUpdateOneInlineInput {
  """Create and connect one Navigation document"""
  create: NavigationCreateInput

  """Update single Navigation document"""
  update: NavigationUpdateWithNestedWhereUniqueInput

  """Upsert single Navigation document"""
  upsert: NavigationUpsertWithNestedWhereUniqueInput

  """Connect existing Navigation document"""
  connect: NavigationWhereUniqueInput

  """Disconnect currently connected Navigation document"""
  disconnect: Boolean

  """Delete currently connected Navigation document"""
  delete: Boolean
}

input NavigationUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: NavigationWhereUniqueInput!

  """Document to update"""
  data: NavigationUpdateInput!
}

input NavigationUpsertInput {
  """Create document if it didn't exist"""
  create: NavigationCreateInput!

  """Update document if it exists"""
  update: NavigationUpdateInput!
}

input NavigationUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: NavigationWhereUniqueInput!

  """Upsert data"""
  data: NavigationUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input NavigationWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input NavigationWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [NavigationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NavigationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationWhereInput!]
  documentInStages_every: NavigationWhereStageInput
  documentInStages_some: NavigationWhereStageInput
  documentInStages_none: NavigationWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input NavigationWhereStageInput {
  """Logical AND on all given filters."""
  AND: [NavigationWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [NavigationWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NavigationWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: NavigationWhereComparatorInput
}

"""References Navigation record uniquely"""
input NavigationWhereUniqueInput {
  id: ID
  slug: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

type Page implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Page!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Page!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  title: String!
  slug: String!
  navigationLabel: String
  subtitle: String

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  footerPrimary(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `footerPrimary` is a model without localized fields and will not
    be affected directly by this argument, however the locales will be passed on
    to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `footerPrimary` is a model without localized fields and will not
    be affected directly by this argument, however the locale will be passed on
    to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Footer
  footerSecondary(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `footerSecondary` is a model without localized fields and will not
    be affected directly by this argument, however the locales will be passed on
    to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `footerSecondary` is a model without localized fields and will not
    be affected directly by this argument, however the locale will be passed on
    to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Footer
  footer(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `footer` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `footer` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Footer
  hero(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `hero` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `hero` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Hero
  navigation(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `navigation` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `navigation` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Navigation
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!
  blocks(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `blocks` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `blocks` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [PageBlocks!]!
  seo(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `seo` is a model without localized fields and will not be affected
    directly by this argument, however the locales will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `seo` is a model without localized fields and will not be affected
    directly by this argument, however the locale will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Seo
  marketing(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `marketing` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `marketing` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [PageMarketingMaterial!]!

  """List of Page versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

union PageBlocks = Testimonial

input PageBlocksConnectInput {
  Testimonial: TestimonialConnectInput
}

input PageBlocksCreateInput {
  Testimonial: TestimonialCreateInput
}

input PageBlocksCreateManyInlineInput {
  """Create and connect multiple existing PageBlocks documents"""
  create: [PageBlocksCreateInput!]

  """Connect multiple existing PageBlocks documents"""
  connect: [PageBlocksWhereUniqueInput!]
}

input PageBlocksCreateOneInlineInput {
  """Create and connect one PageBlocks document"""
  create: PageBlocksCreateInput

  """Connect one existing PageBlocks document"""
  connect: PageBlocksWhereUniqueInput
}

input PageBlocksUpdateInput {
  Testimonial: TestimonialUpdateInput
}

input PageBlocksUpdateManyInlineInput {
  """Create and connect multiple PageBlocks documents"""
  create: [PageBlocksCreateInput!]

  """Connect multiple existing PageBlocks documents"""
  connect: [PageBlocksConnectInput!]

  """
  Override currently-connected documents with multiple existing PageBlocks documents
  """
  set: [PageBlocksWhereUniqueInput!]

  """Update multiple PageBlocks documents"""
  update: [PageBlocksUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple PageBlocks documents"""
  upsert: [PageBlocksUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple PageBlocks documents"""
  disconnect: [PageBlocksWhereUniqueInput!]

  """Delete multiple PageBlocks documents"""
  delete: [PageBlocksWhereUniqueInput!]
}

input PageBlocksUpdateManyWithNestedWhereInput {
  Testimonial: TestimonialUpdateManyWithNestedWhereInput
}

input PageBlocksUpdateOneInlineInput {
  """Create and connect one PageBlocks document"""
  create: PageBlocksCreateInput

  """Update single PageBlocks document"""
  update: PageBlocksUpdateWithNestedWhereUniqueInput

  """Upsert single PageBlocks document"""
  upsert: PageBlocksUpsertWithNestedWhereUniqueInput

  """Connect existing PageBlocks document"""
  connect: PageBlocksWhereUniqueInput

  """Disconnect currently connected PageBlocks document"""
  disconnect: Boolean

  """Delete currently connected PageBlocks document"""
  delete: Boolean
}

input PageBlocksUpdateWithNestedWhereUniqueInput {
  Testimonial: TestimonialUpdateWithNestedWhereUniqueInput
}

input PageBlocksUpsertWithNestedWhereUniqueInput {
  Testimonial: TestimonialUpsertWithNestedWhereUniqueInput
}

input PageBlocksWhereInput {
  Testimonial: TestimonialWhereInput
}

input PageBlocksWhereUniqueInput {
  Testimonial: TestimonialWhereUniqueInput
}

input PageConnectInput {
  """Document to connect"""
  where: PageWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge!]!
  aggregate: Aggregate!
}

input PageCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """title input for default locale (en)"""
  title: String!
  slug: String!
  navigationLabel: String

  """subtitle input for default locale (en)"""
  subtitle: String
  footerPrimary: FooterCreateOneInlineInput
  footerSecondary: FooterCreateOneInlineInput
  footer: FooterCreateOneInlineInput
  hero: HeroCreateOneInlineInput
  navigation: NavigationCreateOneInlineInput
  blocks: PageBlocksCreateManyInlineInput
  seo: SeoCreateOneInlineInput
  marketing: PageMarketingMaterialCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: PageCreateLocalizationsInput
}

input PageCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String!
  subtitle: String
}

input PageCreateLocalizationInput {
  """Localization input"""
  data: PageCreateLocalizationDataInput!
  locale: Locale!
}

input PageCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [PageCreateLocalizationInput!]
}

input PageCreateManyInlineInput {
  """Create and connect multiple existing Page documents"""
  create: [PageCreateInput!]

  """Connect multiple existing Page documents"""
  connect: [PageWhereUniqueInput!]
}

input PageCreateOneInlineInput {
  """Create and connect one Page document"""
  create: PageCreateInput

  """Connect one existing Page document"""
  connect: PageWhereUniqueInput
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Number of items in the current page."""
  pageSize: Int
}

"""Identifies documents"""
input PageManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  documentInStages_every: PageWhereStageInput
  documentInStages_some: PageWhereStageInput
  documentInStages_none: PageWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  navigationLabel: String

  """All values that are not equal to given value."""
  navigationLabel_not: String

  """All values that are contained in given list."""
  navigationLabel_in: [String]

  """All values that are not contained in given list."""
  navigationLabel_not_in: [String]

  """All values containing the given string."""
  navigationLabel_contains: String

  """All values not containing the given string."""
  navigationLabel_not_contains: String

  """All values starting with the given string."""
  navigationLabel_starts_with: String

  """All values not starting with the given string."""
  navigationLabel_not_starts_with: String

  """All values ending with the given string."""
  navigationLabel_ends_with: String

  """All values not ending with the given string"""
  navigationLabel_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  footerPrimary: FooterWhereInput
  footerSecondary: FooterWhereInput
  footer: FooterWhereInput
  hero: HeroWhereInput
  navigation: NavigationWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  seo: SeoWhereInput
}

union PageMarketingMaterial = PopUp

input PageMarketingMaterialConnectInput {
  PopUp: PopUpConnectInput
}

input PageMarketingMaterialCreateInput {
  PopUp: PopUpCreateInput
}

input PageMarketingMaterialCreateManyInlineInput {
  """Create and connect multiple existing PageMarketingMaterial documents"""
  create: [PageMarketingMaterialCreateInput!]

  """Connect multiple existing PageMarketingMaterial documents"""
  connect: [PageMarketingMaterialWhereUniqueInput!]
}

input PageMarketingMaterialCreateOneInlineInput {
  """Create and connect one PageMarketingMaterial document"""
  create: PageMarketingMaterialCreateInput

  """Connect one existing PageMarketingMaterial document"""
  connect: PageMarketingMaterialWhereUniqueInput
}

input PageMarketingMaterialUpdateInput {
  PopUp: PopUpUpdateInput
}

input PageMarketingMaterialUpdateManyInlineInput {
  """Create and connect multiple PageMarketingMaterial documents"""
  create: [PageMarketingMaterialCreateInput!]

  """Connect multiple existing PageMarketingMaterial documents"""
  connect: [PageMarketingMaterialConnectInput!]

  """
  Override currently-connected documents with multiple existing PageMarketingMaterial documents
  """
  set: [PageMarketingMaterialWhereUniqueInput!]

  """Update multiple PageMarketingMaterial documents"""
  update: [PageMarketingMaterialUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple PageMarketingMaterial documents"""
  upsert: [PageMarketingMaterialUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple PageMarketingMaterial documents"""
  disconnect: [PageMarketingMaterialWhereUniqueInput!]

  """Delete multiple PageMarketingMaterial documents"""
  delete: [PageMarketingMaterialWhereUniqueInput!]
}

input PageMarketingMaterialUpdateManyWithNestedWhereInput {
  PopUp: PopUpUpdateManyWithNestedWhereInput
}

input PageMarketingMaterialUpdateOneInlineInput {
  """Create and connect one PageMarketingMaterial document"""
  create: PageMarketingMaterialCreateInput

  """Update single PageMarketingMaterial document"""
  update: PageMarketingMaterialUpdateWithNestedWhereUniqueInput

  """Upsert single PageMarketingMaterial document"""
  upsert: PageMarketingMaterialUpsertWithNestedWhereUniqueInput

  """Connect existing PageMarketingMaterial document"""
  connect: PageMarketingMaterialWhereUniqueInput

  """Disconnect currently connected PageMarketingMaterial document"""
  disconnect: Boolean

  """Delete currently connected PageMarketingMaterial document"""
  delete: Boolean
}

input PageMarketingMaterialUpdateWithNestedWhereUniqueInput {
  PopUp: PopUpUpdateWithNestedWhereUniqueInput
}

input PageMarketingMaterialUpsertWithNestedWhereUniqueInput {
  PopUp: PopUpUpsertWithNestedWhereUniqueInput
}

input PageMarketingMaterialWhereInput {
  PopUp: PopUpWhereInput
}

input PageMarketingMaterialWhereUniqueInput {
  PopUp: PopUpWhereUniqueInput
}

enum PageOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  navigationLabel_ASC
  navigationLabel_DESC
  subtitle_ASC
  subtitle_DESC
}

input PageUpdateInput {
  """title input for default locale (en)"""
  title: String
  slug: String
  navigationLabel: String

  """subtitle input for default locale (en)"""
  subtitle: String
  footerPrimary: FooterUpdateOneInlineInput
  footerSecondary: FooterUpdateOneInlineInput
  footer: FooterUpdateOneInlineInput
  hero: HeroUpdateOneInlineInput
  navigation: NavigationUpdateOneInlineInput
  blocks: PageBlocksUpdateManyInlineInput
  seo: SeoUpdateOneInlineInput
  marketing: PageMarketingMaterialUpdateManyInlineInput

  """Manage document localizations"""
  localizations: PageUpdateLocalizationsInput
}

input PageUpdateLocalizationDataInput {
  title: String
  subtitle: String
}

input PageUpdateLocalizationInput {
  data: PageUpdateLocalizationDataInput!
  locale: Locale!
}

input PageUpdateLocalizationsInput {
  """Localizations to create"""
  create: [PageCreateLocalizationInput!]

  """Localizations to update"""
  update: [PageUpdateLocalizationInput!]
  upsert: [PageUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input PageUpdateManyInlineInput {
  """Create and connect multiple Page documents"""
  create: [PageCreateInput!]

  """Connect multiple existing Page documents"""
  connect: [PageConnectInput!]

  """
  Override currently-connected documents with multiple existing Page documents
  """
  set: [PageWhereUniqueInput!]

  """Update multiple Page documents"""
  update: [PageUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Page documents"""
  upsert: [PageUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Page documents"""
  disconnect: [PageWhereUniqueInput!]

  """Delete multiple Page documents"""
  delete: [PageWhereUniqueInput!]
}

input PageUpdateManyInput {
  """title input for default locale (en)"""
  title: String
  navigationLabel: String

  """subtitle input for default locale (en)"""
  subtitle: String

  """Optional updates to localizations"""
  localizations: PageUpdateManyLocalizationsInput
}

input PageUpdateManyLocalizationDataInput {
  title: String
  subtitle: String
}

input PageUpdateManyLocalizationInput {
  data: PageUpdateManyLocalizationDataInput!
  locale: Locale!
}

input PageUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [PageUpdateManyLocalizationInput!]
}

input PageUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PageWhereInput!

  """Update many input"""
  data: PageUpdateManyInput!
}

input PageUpdateOneInlineInput {
  """Create and connect one Page document"""
  create: PageCreateInput

  """Update single Page document"""
  update: PageUpdateWithNestedWhereUniqueInput

  """Upsert single Page document"""
  upsert: PageUpsertWithNestedWhereUniqueInput

  """Connect existing Page document"""
  connect: PageWhereUniqueInput

  """Disconnect currently connected Page document"""
  disconnect: Boolean

  """Delete currently connected Page document"""
  delete: Boolean
}

input PageUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Document to update"""
  data: PageUpdateInput!
}

input PageUpsertInput {
  """Create document if it didn't exist"""
  create: PageCreateInput!

  """Update document if it exists"""
  update: PageUpdateInput!
}

input PageUpsertLocalizationInput {
  update: PageUpdateLocalizationDataInput!
  create: PageCreateLocalizationDataInput!
  locale: Locale!
}

input PageUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Upsert data"""
  data: PageUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input PageWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input PageWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  documentInStages_every: PageWhereStageInput
  documentInStages_some: PageWhereStageInput
  documentInStages_none: PageWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  navigationLabel: String

  """All values that are not equal to given value."""
  navigationLabel_not: String

  """All values that are contained in given list."""
  navigationLabel_in: [String]

  """All values that are not contained in given list."""
  navigationLabel_not_in: [String]

  """All values containing the given string."""
  navigationLabel_contains: String

  """All values not containing the given string."""
  navigationLabel_not_contains: String

  """All values starting with the given string."""
  navigationLabel_starts_with: String

  """All values not starting with the given string."""
  navigationLabel_not_starts_with: String

  """All values ending with the given string."""
  navigationLabel_ends_with: String

  """All values not ending with the given string"""
  navigationLabel_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String]

  """All values that are not contained in given list."""
  subtitle_not_in: [String]

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string"""
  subtitle_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  footerPrimary: FooterWhereInput
  footerSecondary: FooterWhereInput
  footer: FooterWhereInput
  hero: HeroWhereInput
  navigation: NavigationWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  seo: SeoWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input PageWhereStageInput {
  """Logical AND on all given filters."""
  AND: [PageWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: PageWhereComparatorInput
}

"""References Page record uniquely"""
input PageWhereUniqueInput {
  id: ID
  slug: String
}

type Person implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Person!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  name: String!
  role: String

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  testimonials(
    where: TestimonialWhereInput
    orderBy: TestimonialOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `testimonials` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `testimonials` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Testimonial!]!
  photo(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `photo` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `photo` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset
  posts(
    where: BlogPostWhereInput
    orderBy: BlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `posts` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `posts` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [BlogPost!]!
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Person versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input PersonConnectInput {
  """Document to connect"""
  where: PersonWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge!]!
  aggregate: Aggregate!
}

input PersonCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  name: String!
  role: String
  testimonials: TestimonialCreateManyInlineInput
  photo: AssetCreateOneInlineInput
  posts: BlogPostCreateManyInlineInput
}

input PersonCreateManyInlineInput {
  """Create and connect multiple existing Person documents"""
  create: [PersonCreateInput!]

  """Connect multiple existing Person documents"""
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneInlineInput {
  """Create and connect one Person document"""
  create: PersonCreateInput

  """Connect one existing Person document"""
  connect: PersonWhereUniqueInput
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input PersonManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  documentInStages_every: PersonWhereStageInput
  documentInStages_some: PersonWhereStageInput
  documentInStages_none: PersonWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String]

  """All values that are not contained in given list."""
  role_not_in: [String]

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string"""
  role_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  testimonials_every: TestimonialWhereInput
  testimonials_some: TestimonialWhereInput
  testimonials_none: TestimonialWhereInput
  photo: AssetWhereInput
  posts_every: BlogPostWhereInput
  posts_some: BlogPostWhereInput
  posts_none: BlogPostWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum PersonOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
}

input PersonUpdateInput {
  name: String
  role: String
  testimonials: TestimonialUpdateManyInlineInput
  photo: AssetUpdateOneInlineInput
  posts: BlogPostUpdateManyInlineInput
}

input PersonUpdateManyInlineInput {
  """Create and connect multiple Person documents"""
  create: [PersonCreateInput!]

  """Connect multiple existing Person documents"""
  connect: [PersonConnectInput!]

  """
  Override currently-connected documents with multiple existing Person documents
  """
  set: [PersonWhereUniqueInput!]

  """Update multiple Person documents"""
  update: [PersonUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Person documents"""
  upsert: [PersonUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Person documents"""
  disconnect: [PersonWhereUniqueInput!]

  """Delete multiple Person documents"""
  delete: [PersonWhereUniqueInput!]
}

input PersonUpdateManyInput {
  name: String
  role: String
}

input PersonUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PersonWhereInput!

  """Update many input"""
  data: PersonUpdateManyInput!
}

input PersonUpdateOneInlineInput {
  """Create and connect one Person document"""
  create: PersonCreateInput

  """Update single Person document"""
  update: PersonUpdateWithNestedWhereUniqueInput

  """Upsert single Person document"""
  upsert: PersonUpsertWithNestedWhereUniqueInput

  """Connect existing Person document"""
  connect: PersonWhereUniqueInput

  """Disconnect currently connected Person document"""
  disconnect: Boolean

  """Delete currently connected Person document"""
  delete: Boolean
}

input PersonUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PersonWhereUniqueInput!

  """Document to update"""
  data: PersonUpdateInput!
}

input PersonUpsertInput {
  """Create document if it didn't exist"""
  create: PersonCreateInput!

  """Update document if it exists"""
  update: PersonUpdateInput!
}

input PersonUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PersonWhereUniqueInput!

  """Upsert data"""
  data: PersonUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input PersonWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input PersonWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  documentInStages_every: PersonWhereStageInput
  documentInStages_some: PersonWhereStageInput
  documentInStages_none: PersonWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String]

  """All values that are not contained in given list."""
  role_not_in: [String]

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string"""
  role_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  testimonials_every: TestimonialWhereInput
  testimonials_some: TestimonialWhereInput
  testimonials_none: TestimonialWhereInput
  photo: AssetWhereInput
  posts_every: BlogPostWhereInput
  posts_some: BlogPostWhereInput
  posts_none: BlogPostWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input PersonWhereStageInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: PersonWhereComparatorInput
}

"""References Person record uniquely"""
input PersonWhereUniqueInput {
  id: ID
}

type PopUp implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [PopUp!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  title: String
  description: String
  cta: String
  url: String

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  image(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!
  blogPosts(
    where: BlogPostWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `blogPosts` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `blogPosts` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [BlogPost!]!
  pages(
    where: PageWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `pages` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `pages` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!

  """List of PopUp versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input PopUpConnectInput {
  """Document to connect"""
  where: PopUpWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type PopUpConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PopUpEdge!]!
  aggregate: Aggregate!
}

input PopUpCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String
  description: String
  cta: String
  url: String
  image: AssetCreateOneInlineInput
  blogPosts: BlogPostCreateManyInlineInput
  pages: PageCreateManyInlineInput
}

input PopUpCreateManyInlineInput {
  """Create and connect multiple existing PopUp documents"""
  create: [PopUpCreateInput!]

  """Connect multiple existing PopUp documents"""
  connect: [PopUpWhereUniqueInput!]
}

input PopUpCreateOneInlineInput {
  """Create and connect one PopUp document"""
  create: PopUpCreateInput

  """Connect one existing PopUp document"""
  connect: PopUpWhereUniqueInput
}

"""An edge in a connection."""
type PopUpEdge {
  """The item at the end of the edge."""
  node: PopUp!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input PopUpManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PopUpWhereInput!]

  """Logical OR on all given filters."""
  OR: [PopUpWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PopUpWhereInput!]
  documentInStages_every: PopUpWhereStageInput
  documentInStages_some: PopUpWhereStageInput
  documentInStages_none: PopUpWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  cta: String

  """All values that are not equal to given value."""
  cta_not: String

  """All values that are contained in given list."""
  cta_in: [String]

  """All values that are not contained in given list."""
  cta_not_in: [String]

  """All values containing the given string."""
  cta_contains: String

  """All values not containing the given string."""
  cta_not_contains: String

  """All values starting with the given string."""
  cta_starts_with: String

  """All values not starting with the given string."""
  cta_not_starts_with: String

  """All values ending with the given string."""
  cta_ends_with: String

  """All values not ending with the given string"""
  cta_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String]

  """All values that are not contained in given list."""
  url_not_in: [String]

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string"""
  url_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  blogPosts_every: BlogPostWhereInput
  blogPosts_some: BlogPostWhereInput
  blogPosts_none: BlogPostWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

enum PopUpOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  cta_ASC
  cta_DESC
  url_ASC
  url_DESC
}

enum PopUpTheme {
  LIGHT
  DARK
  WHITE
}

input PopUpUpdateInput {
  title: String
  description: String
  cta: String
  url: String
  image: AssetUpdateOneInlineInput
  blogPosts: BlogPostUpdateManyInlineInput
  pages: PageUpdateManyInlineInput
}

input PopUpUpdateManyInlineInput {
  """Create and connect multiple PopUp documents"""
  create: [PopUpCreateInput!]

  """Connect multiple existing PopUp documents"""
  connect: [PopUpConnectInput!]

  """
  Override currently-connected documents with multiple existing PopUp documents
  """
  set: [PopUpWhereUniqueInput!]

  """Update multiple PopUp documents"""
  update: [PopUpUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple PopUp documents"""
  upsert: [PopUpUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple PopUp documents"""
  disconnect: [PopUpWhereUniqueInput!]

  """Delete multiple PopUp documents"""
  delete: [PopUpWhereUniqueInput!]
}

input PopUpUpdateManyInput {
  title: String
  description: String
  cta: String
  url: String
}

input PopUpUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PopUpWhereInput!

  """Update many input"""
  data: PopUpUpdateManyInput!
}

input PopUpUpdateOneInlineInput {
  """Create and connect one PopUp document"""
  create: PopUpCreateInput

  """Update single PopUp document"""
  update: PopUpUpdateWithNestedWhereUniqueInput

  """Upsert single PopUp document"""
  upsert: PopUpUpsertWithNestedWhereUniqueInput

  """Connect existing PopUp document"""
  connect: PopUpWhereUniqueInput

  """Disconnect currently connected PopUp document"""
  disconnect: Boolean

  """Delete currently connected PopUp document"""
  delete: Boolean
}

input PopUpUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PopUpWhereUniqueInput!

  """Document to update"""
  data: PopUpUpdateInput!
}

input PopUpUpsertInput {
  """Create document if it didn't exist"""
  create: PopUpCreateInput!

  """Update document if it exists"""
  update: PopUpUpdateInput!
}

input PopUpUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PopUpWhereUniqueInput!

  """Upsert data"""
  data: PopUpUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input PopUpWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input PopUpWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PopUpWhereInput!]

  """Logical OR on all given filters."""
  OR: [PopUpWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PopUpWhereInput!]
  documentInStages_every: PopUpWhereStageInput
  documentInStages_some: PopUpWhereStageInput
  documentInStages_none: PopUpWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  cta: String

  """All values that are not equal to given value."""
  cta_not: String

  """All values that are contained in given list."""
  cta_in: [String]

  """All values that are not contained in given list."""
  cta_not_in: [String]

  """All values containing the given string."""
  cta_contains: String

  """All values not containing the given string."""
  cta_not_contains: String

  """All values starting with the given string."""
  cta_starts_with: String

  """All values not starting with the given string."""
  cta_not_starts_with: String

  """All values ending with the given string."""
  cta_ends_with: String

  """All values not ending with the given string"""
  cta_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String]

  """All values that are not contained in given list."""
  url_not_in: [String]

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string"""
  url_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  blogPosts_every: BlogPostWhereInput
  blogPosts_some: BlogPostWhereInput
  blogPosts_none: BlogPostWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input PopUpWhereStageInput {
  """Logical AND on all given filters."""
  AND: [PopUpWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [PopUpWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PopUpWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: PopUpWhereComparatorInput
}

"""References PopUp record uniquely"""
input PopUpWhereUniqueInput {
  id: ID
}

"""A data processor"""
type Processor implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Processor!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  slug: String!
  name: String!
  url: String!
  description: String
  email: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Processor versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input ProcessorConnectInput {
  """Document to connect"""
  where: ProcessorWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type ProcessorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProcessorEdge!]!
  aggregate: Aggregate!
}

input ProcessorCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  slug: String!
  name: String!
  url: String!
  description: String
  email: String!
}

input ProcessorCreateManyInlineInput {
  """Create and connect multiple existing Processor documents"""
  create: [ProcessorCreateInput!]

  """Connect multiple existing Processor documents"""
  connect: [ProcessorWhereUniqueInput!]
}

input ProcessorCreateOneInlineInput {
  """Create and connect one Processor document"""
  create: ProcessorCreateInput

  """Connect one existing Processor document"""
  connect: ProcessorWhereUniqueInput
}

"""An edge in a connection."""
type ProcessorEdge {
  """The item at the end of the edge."""
  node: Processor!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input ProcessorManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ProcessorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProcessorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProcessorWhereInput!]
  documentInStages_every: ProcessorWhereStageInput
  documentInStages_some: ProcessorWhereStageInput
  documentInStages_none: ProcessorWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String]

  """All values that are not contained in given list."""
  url_not_in: [String]

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string"""
  url_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String]

  """All values that are not contained in given list."""
  email_not_in: [String]

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string"""
  email_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum ProcessorOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  description_ASC
  description_DESC
  email_ASC
  email_DESC
}

input ProcessorUpdateInput {
  slug: String
  name: String
  url: String
  description: String
  email: String
}

input ProcessorUpdateManyInlineInput {
  """Create and connect multiple Processor documents"""
  create: [ProcessorCreateInput!]

  """Connect multiple existing Processor documents"""
  connect: [ProcessorConnectInput!]

  """
  Override currently-connected documents with multiple existing Processor documents
  """
  set: [ProcessorWhereUniqueInput!]

  """Update multiple Processor documents"""
  update: [ProcessorUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Processor documents"""
  upsert: [ProcessorUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Processor documents"""
  disconnect: [ProcessorWhereUniqueInput!]

  """Delete multiple Processor documents"""
  delete: [ProcessorWhereUniqueInput!]
}

input ProcessorUpdateManyInput {
  name: String
  url: String
  description: String
  email: String
}

input ProcessorUpdateManyWithNestedWhereInput {
  """Document search"""
  where: ProcessorWhereInput!

  """Update many input"""
  data: ProcessorUpdateManyInput!
}

input ProcessorUpdateOneInlineInput {
  """Create and connect one Processor document"""
  create: ProcessorCreateInput

  """Update single Processor document"""
  update: ProcessorUpdateWithNestedWhereUniqueInput

  """Upsert single Processor document"""
  upsert: ProcessorUpsertWithNestedWhereUniqueInput

  """Connect existing Processor document"""
  connect: ProcessorWhereUniqueInput

  """Disconnect currently connected Processor document"""
  disconnect: Boolean

  """Delete currently connected Processor document"""
  delete: Boolean
}

input ProcessorUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ProcessorWhereUniqueInput!

  """Document to update"""
  data: ProcessorUpdateInput!
}

input ProcessorUpsertInput {
  """Create document if it didn't exist"""
  create: ProcessorCreateInput!

  """Update document if it exists"""
  update: ProcessorUpdateInput!
}

input ProcessorUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ProcessorWhereUniqueInput!

  """Upsert data"""
  data: ProcessorUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input ProcessorWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input ProcessorWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ProcessorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProcessorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProcessorWhereInput!]
  documentInStages_every: ProcessorWhereStageInput
  documentInStages_some: ProcessorWhereStageInput
  documentInStages_none: ProcessorWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String]

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String]

  """All values that are not contained in given list."""
  url_not_in: [String]

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string"""
  url_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String]

  """All values that are not contained in given list."""
  email_not_in: [String]

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string"""
  email_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input ProcessorWhereStageInput {
  """Logical AND on all given filters."""
  AND: [ProcessorWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [ProcessorWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProcessorWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: ProcessorWhereComparatorInput
}

"""References Processor record uniquely"""
input ProcessorWhereUniqueInput {
  id: ID
  slug: String
}

input PublishLocaleInput {
  """Locales to publish"""
  locale: Locale!

  """Stages to publish selected locales to"""
  stages: [Stage!]!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Node` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Node

  """Retrieve multiple stats"""
  stats(
    where: StatWhereInput
    orderBy: StatOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Stat` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Stat!]!

  """Retrieve a single stat"""
  stat(
    where: StatWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Stat` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Stat

  """Retrieve multiple stats using the Relay connection interface"""
  statsConnection(
    where: StatWhereInput
    orderBy: StatOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Stat` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): StatConnection!

  """Retrieve document version"""
  statVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple footers"""
  footers(
    where: FooterWhereInput
    orderBy: FooterOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Footer` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Footer!]!

  """Retrieve a single footer"""
  footer(
    where: FooterWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Footer` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Footer

  """Retrieve multiple footers using the Relay connection interface"""
  footersConnection(
    where: FooterWhereInput
    orderBy: FooterOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Footer` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FooterConnection!

  """Retrieve document version"""
  footerVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple testimonials"""
  testimonials(
    where: TestimonialWhereInput
    orderBy: TestimonialOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Testimonial` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Testimonial!]!

  """Retrieve a single testimonial"""
  testimonial(
    where: TestimonialWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Testimonial` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Testimonial

  """Retrieve multiple testimonials using the Relay connection interface"""
  testimonialsConnection(
    where: TestimonialWhereInput
    orderBy: TestimonialOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Testimonial` will be affected directly by this argument, as well
    as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): TestimonialConnection!

  """Retrieve document version"""
  testimonialVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple blogPosts"""
  blogPosts(
    where: BlogPostWhereInput
    orderBy: BlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `BlogPost` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [BlogPost!]!

  """Retrieve a single blogPost"""
  blogPost(
    where: BlogPostWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `BlogPost` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): BlogPost

  """Retrieve multiple blogPosts using the Relay connection interface"""
  blogPostsConnection(
    where: BlogPostWhereInput
    orderBy: BlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `BlogPost` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): BlogPostConnection!

  """Retrieve document version"""
  blogPostVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple features"""
  features(
    where: FeatureWhereInput
    orderBy: FeatureOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Feature` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Feature!]!

  """Retrieve a single feature"""
  feature(
    where: FeatureWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Feature` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Feature

  """Retrieve multiple features using the Relay connection interface"""
  featuresConnection(
    where: FeatureWhereInput
    orderBy: FeatureOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Feature` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FeatureConnection!

  """Retrieve document version"""
  featureVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple heroes"""
  heroes(
    where: HeroWhereInput
    orderBy: HeroOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Hero` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Hero!]!

  """Retrieve a single hero"""
  hero(
    where: HeroWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Hero` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Hero

  """Retrieve multiple heroes using the Relay connection interface"""
  heroesConnection(
    where: HeroWhereInput
    orderBy: HeroOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Hero` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): HeroConnection!

  """Retrieve document version"""
  heroVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple navigations"""
  navigations(
    where: NavigationWhereInput
    orderBy: NavigationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Navigation` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Navigation!]!

  """Retrieve a single navigation"""
  navigation(
    where: NavigationWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Navigation` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Navigation

  """Retrieve multiple navigations using the Relay connection interface"""
  navigationsConnection(
    where: NavigationWhereInput
    orderBy: NavigationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Navigation` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): NavigationConnection!

  """Retrieve document version"""
  navigationVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple pages"""
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Page!]!

  """Retrieve a single page"""
  page(
    where: PageWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Page

  """Retrieve multiple pages using the Relay connection interface"""
  pagesConnection(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): PageConnection!

  """Retrieve document version"""
  pageVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple people"""
  people(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Person` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Person!]!

  """Retrieve a single person"""
  person(
    where: PersonWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Person` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Person

  """Retrieve multiple people using the Relay connection interface"""
  peopleConnection(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Person` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): PersonConnection!

  """Retrieve document version"""
  personVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple assets"""
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Asset!]!

  """Retrieve a single asset"""
  asset(
    where: AssetWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Asset

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): AssetConnection!

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple seos"""
  seos(
    where: SeoWhereInput
    orderBy: SeoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Seo` is a model without localized fields and will not be affected
    directly by this argument, however the locales will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Seo!]!

  """Retrieve a single seo"""
  seo(
    where: SeoWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Seo` is a model without localized fields and will not be affected
    directly by this argument, however the locales will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Seo

  """Retrieve multiple seos using the Relay connection interface"""
  seosConnection(
    where: SeoWhereInput
    orderBy: SeoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Seo` is a model without localized fields and will not be affected
    directly by this argument, however the locales will be passed on to any
    relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): SeoConnection!

  """Retrieve document version"""
  seoVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple popUps"""
  popUps(
    where: PopUpWhereInput
    orderBy: PopUpOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `PopUp` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [PopUp!]!

  """Retrieve a single popUp"""
  popUp(
    where: PopUpWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `PopUp` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): PopUp

  """Retrieve multiple popUps using the Relay connection interface"""
  popUpsConnection(
    where: PopUpWhereInput
    orderBy: PopUpOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `PopUp` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): PopUpConnection!

  """Retrieve document version"""
  popUpVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple users"""
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [User!]!

  """Retrieve a single user"""
  user(
    where: UserWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): User

  """Retrieve multiple users using the Relay connection interface"""
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): UserConnection!

  """Retrieve multiple scheduledOperations"""
  scheduledOperations(
    where: ScheduledOperationWhereInput
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [ScheduledOperation!]!

  """Retrieve a single scheduledOperation"""
  scheduledOperation(
    where: ScheduledOperationWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ScheduledOperation

  """
  Retrieve multiple scheduledOperations using the Relay connection interface
  """
  scheduledOperationsConnection(
    where: ScheduledOperationWhereInput
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ScheduledOperationConnection!

  """Retrieve multiple scheduledReleases"""
  scheduledReleases(
    where: ScheduledReleaseWhereInput
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [ScheduledRelease!]!

  """Retrieve a single scheduledRelease"""
  scheduledRelease(
    where: ScheduledReleaseWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ScheduledRelease

  """
  Retrieve multiple scheduledReleases using the Relay connection interface
  """
  scheduledReleasesConnection(
    where: ScheduledReleaseWhereInput
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ScheduledReleaseConnection!

  """Retrieve multiple copies"""
  copies(
    where: CopyWhereInput
    orderBy: CopyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Copy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Copy!]!

  """Retrieve a single copy"""
  copy(
    where: CopyWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Copy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Copy

  """Retrieve multiple copies using the Relay connection interface"""
  copiesConnection(
    where: CopyWhereInput
    orderBy: CopyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Copy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): CopyConnection!

  """Retrieve document version"""
  copyVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple guides"""
  guides(
    where: GuideWhereInput
    orderBy: GuideOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Guide` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Guide!]!

  """Retrieve a single guide"""
  guide(
    where: GuideWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Guide` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Guide

  """Retrieve multiple guides using the Relay connection interface"""
  guidesConnection(
    where: GuideWhereInput
    orderBy: GuideOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Guide` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): GuideConnection!

  """Retrieve document version"""
  guideVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple events"""
  events(
    where: EventWhereInput
    orderBy: EventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Event!]!

  """Retrieve a single event"""
  event(
    where: EventWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Event

  """Retrieve multiple events using the Relay connection interface"""
  eventsConnection(
    where: EventWhereInput
    orderBy: EventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): EventConnection!

  """Retrieve document version"""
  eventVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple longforms"""
  longforms(
    where: LongformWhereInput
    orderBy: LongformOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Longform` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Longform!]!

  """Retrieve a single longform"""
  longform(
    where: LongformWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Longform` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Longform

  """Retrieve multiple longforms using the Relay connection interface"""
  longformsConnection(
    where: LongformWhereInput
    orderBy: LongformOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Longform` will be affected directly by this argument, as well as
    any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): LongformConnection!

  """Retrieve document version"""
  longformVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple processors"""
  processors(
    where: ProcessorWhereInput
    orderBy: ProcessorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Processor` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Processor!]!

  """Retrieve a single processor"""
  processor(
    where: ProcessorWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Processor` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Processor

  """Retrieve multiple processors using the Relay connection interface"""
  processorsConnection(
    where: ProcessorWhereInput
    orderBy: ProcessorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Processor` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ProcessorConnection!

  """Retrieve document version"""
  processorVersion(where: VersionWhereInput!): DocumentVersion
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
  """Returns AST representation"""
  raw: RichTextAST!

  """Returns HTMl representation"""
  html: String!

  """Returns Markdown representation"""
  markdown: String!

  """Returns plain-text contents of RichText"""
  text: String!
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

"""Scheduled Operation system model"""
type ScheduledOperation implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [ScheduledOperation!]!

  """
  Raw operation payload including all details, this field is subject to change
  """
  rawPayload: Json!

  """Operation error message"""
  errorMessage: String

  """Operation description"""
  description: String

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!

  """The release this operation is scheduled for"""
  release(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): ScheduledRelease

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """operation Status"""
  status: ScheduledOperationStatus!
  affectedDocuments(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will
    not be affected directly by this argument, however the locales will be
    passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will
    not be affected directly by this argument, however the locale will be passed
    on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperationAffectedDocument!]!
}

union ScheduledOperationAffectedDocument = Asset | BlogPost | Copy | Event | Feature | Footer | Guide | Hero | Longform | Navigation | Page | Person | PopUp | Processor | Seo | Stat | Testimonial

input ScheduledOperationConnectInput {
  """Document to connect"""
  where: ScheduledOperationWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type ScheduledOperationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledOperationEdge!]!
  aggregate: Aggregate!
}

input ScheduledOperationCreateManyInlineInput {
  """Connect multiple existing ScheduledOperation documents"""
  connect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationCreateOneInlineInput {
  """Connect one existing ScheduledOperation document"""
  connect: ScheduledOperationWhereUniqueInput
}

"""An edge in a connection."""
type ScheduledOperationEdge {
  """The item at the end of the edge."""
  node: ScheduledOperation!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input ScheduledOperationManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ScheduledOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledOperationWhereInput!]

  """All values containing the given json path."""
  rawPayload_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  rawPayload_value_recursive: Json
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  release: ScheduledReleaseWhereInput
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  status: ScheduledOperationStatus

  """All values that are not equal to given value."""
  status_not: ScheduledOperationStatus

  """All values that are contained in given list."""
  status_in: [ScheduledOperationStatus]

  """All values that are not contained in given list."""
  status_not_in: [ScheduledOperationStatus]
}

enum ScheduledOperationOrderByInput {
  errorMessage_ASC
  errorMessage_DESC
  description_ASC
  description_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

"""System Scheduled Operation Status"""
enum ScheduledOperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELED
}

input ScheduledOperationUpdateManyInlineInput {
  """Connect multiple existing ScheduledOperation documents"""
  connect: [ScheduledOperationConnectInput!]

  """
  Override currently-connected documents with multiple existing ScheduledOperation documents
  """
  set: [ScheduledOperationWhereUniqueInput!]

  """Disconnect multiple ScheduledOperation documents"""
  disconnect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationUpdateOneInlineInput {
  """Connect existing ScheduledOperation document"""
  connect: ScheduledOperationWhereUniqueInput

  """Disconnect currently connected ScheduledOperation document"""
  disconnect: Boolean
}

"""Identifies documents"""
input ScheduledOperationWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ScheduledOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledOperationWhereInput!]

  """All values containing the given json path."""
  rawPayload_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  rawPayload_value_recursive: Json
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  release: ScheduledReleaseWhereInput
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  status: ScheduledOperationStatus

  """All values that are not equal to given value."""
  status_not: ScheduledOperationStatus

  """All values that are contained in given list."""
  status_in: [ScheduledOperationStatus]

  """All values that are not contained in given list."""
  status_not_in: [ScheduledOperationStatus]
}

"""References ScheduledOperation record uniquely"""
input ScheduledOperationWhereUniqueInput {
  id: ID
}

"""Scheduled Release system model"""
type ScheduledRelease implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [ScheduledRelease!]!

  """Release date and time"""
  releaseAt: DateTime

  """Whether scheduled release is implicit"""
  isImplicit: Boolean!

  """Whether scheduled release should be run"""
  isActive: Boolean!

  """Release error message"""
  errorMessage: String

  """Release description"""
  description: String

  """Release Title"""
  title: String

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!

  """Operations to run with this release"""
  operations(
    where: ScheduledOperationWhereInput
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """Release Status"""
  status: ScheduledReleaseStatus!
}

input ScheduledReleaseConnectInput {
  """Document to connect"""
  where: ScheduledReleaseWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type ScheduledReleaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledReleaseEdge!]!
  aggregate: Aggregate!
}

input ScheduledReleaseCreateInput {
  releaseAt: DateTime
  isActive: Boolean = true
  errorMessage: String
  description: String
  title: String
  updatedAt: DateTime
  createdAt: DateTime
}

input ScheduledReleaseCreateManyInlineInput {
  """Create and connect multiple existing ScheduledRelease documents"""
  create: [ScheduledReleaseCreateInput!]

  """Connect multiple existing ScheduledRelease documents"""
  connect: [ScheduledReleaseWhereUniqueInput!]
}

input ScheduledReleaseCreateOneInlineInput {
  """Create and connect one ScheduledRelease document"""
  create: ScheduledReleaseCreateInput

  """Connect one existing ScheduledRelease document"""
  connect: ScheduledReleaseWhereUniqueInput
}

"""An edge in a connection."""
type ScheduledReleaseEdge {
  """The item at the end of the edge."""
  node: ScheduledRelease!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input ScheduledReleaseManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ScheduledReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledReleaseWhereInput!]
  releaseAt: DateTime

  """All values that are not equal to given value."""
  releaseAt_not: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime]

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime
  isImplicit: Boolean

  """All values that are not equal to given value."""
  isImplicit_not: Boolean
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  operations_every: ScheduledOperationWhereInput
  operations_some: ScheduledOperationWhereInput
  operations_none: ScheduledOperationWhereInput
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  status: ScheduledReleaseStatus

  """All values that are not equal to given value."""
  status_not: ScheduledReleaseStatus

  """All values that are contained in given list."""
  status_in: [ScheduledReleaseStatus]

  """All values that are not contained in given list."""
  status_not_in: [ScheduledReleaseStatus]
}

enum ScheduledReleaseOrderByInput {
  releaseAt_ASC
  releaseAt_DESC
  isImplicit_ASC
  isImplicit_DESC
  isActive_ASC
  isActive_DESC
  errorMessage_ASC
  errorMessage_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

"""System Scheduled Release Status"""
enum ScheduledReleaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

input ScheduledReleaseUpdateInput {
  releaseAt: DateTime
  isActive: Boolean
  errorMessage: String
  description: String
  title: String
}

input ScheduledReleaseUpdateManyInlineInput {
  """Create and connect multiple ScheduledRelease documents"""
  create: [ScheduledReleaseCreateInput!]

  """Connect multiple existing ScheduledRelease documents"""
  connect: [ScheduledReleaseConnectInput!]

  """
  Override currently-connected documents with multiple existing ScheduledRelease documents
  """
  set: [ScheduledReleaseWhereUniqueInput!]

  """Update multiple ScheduledRelease documents"""
  update: [ScheduledReleaseUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple ScheduledRelease documents"""
  upsert: [ScheduledReleaseUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple ScheduledRelease documents"""
  disconnect: [ScheduledReleaseWhereUniqueInput!]

  """Delete multiple ScheduledRelease documents"""
  delete: [ScheduledReleaseWhereUniqueInput!]
}

input ScheduledReleaseUpdateManyInput {
  releaseAt: DateTime
  isActive: Boolean
  errorMessage: String
  description: String
  title: String
}

input ScheduledReleaseUpdateManyWithNestedWhereInput {
  """Document search"""
  where: ScheduledReleaseWhereInput!

  """Update many input"""
  data: ScheduledReleaseUpdateManyInput!
}

input ScheduledReleaseUpdateOneInlineInput {
  """Create and connect one ScheduledRelease document"""
  create: ScheduledReleaseCreateInput

  """Update single ScheduledRelease document"""
  update: ScheduledReleaseUpdateWithNestedWhereUniqueInput

  """Upsert single ScheduledRelease document"""
  upsert: ScheduledReleaseUpsertWithNestedWhereUniqueInput

  """Connect existing ScheduledRelease document"""
  connect: ScheduledReleaseWhereUniqueInput

  """Disconnect currently connected ScheduledRelease document"""
  disconnect: Boolean

  """Delete currently connected ScheduledRelease document"""
  delete: Boolean
}

input ScheduledReleaseUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ScheduledReleaseWhereUniqueInput!

  """Document to update"""
  data: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertInput {
  """Create document if it didn't exist"""
  create: ScheduledReleaseCreateInput!

  """Update document if it exists"""
  update: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ScheduledReleaseWhereUniqueInput!

  """Upsert data"""
  data: ScheduledReleaseUpsertInput!
}

"""Identifies documents"""
input ScheduledReleaseWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ScheduledReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledReleaseWhereInput!]
  releaseAt: DateTime

  """All values that are not equal to given value."""
  releaseAt_not: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime]

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime
  isImplicit: Boolean

  """All values that are not equal to given value."""
  isImplicit_not: Boolean
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  operations_every: ScheduledOperationWhereInput
  operations_some: ScheduledOperationWhereInput
  operations_none: ScheduledOperationWhereInput
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  status: ScheduledReleaseStatus

  """All values that are not equal to given value."""
  status_not: ScheduledReleaseStatus

  """All values that are contained in given list."""
  status_in: [ScheduledReleaseStatus]

  """All values that are not contained in given list."""
  status_not_in: [ScheduledReleaseStatus]
}

"""References ScheduledRelease record uniquely"""
input ScheduledReleaseWhereUniqueInput {
  id: ID
}

type Seo implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Seo!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!
  title: String
  description: String
  keywords: [String!]!
  noIndex: Boolean!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  image(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Asset
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!
  parent(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `parent` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `parent` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): SeoSeo

  """List of Seo versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input SeoConnectInput {
  """Document to connect"""
  where: SeoWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type SeoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeoEdge!]!
  aggregate: Aggregate!
}

input SeoCreateInput {
  updatedAt: DateTime
  createdAt: DateTime
  title: String
  description: String
  keywords: [String!]
  noIndex: Boolean!
  image: AssetCreateOneInlineInput
  parent: SeoSeoCreateOneInlineInput
}

input SeoCreateManyInlineInput {
  """Create and connect multiple existing Seo documents"""
  create: [SeoCreateInput!]

  """Connect multiple existing Seo documents"""
  connect: [SeoWhereUniqueInput!]
}

input SeoCreateOneInlineInput {
  """Create and connect one Seo document"""
  create: SeoCreateInput

  """Connect one existing Seo document"""
  connect: SeoWhereUniqueInput
}

"""An edge in a connection."""
type SeoEdge {
  """The item at the end of the edge."""
  node: Seo!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input SeoManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SeoWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeoWhereInput!]
  documentInStages_every: SeoWhereStageInput
  documentInStages_some: SeoWhereStageInput
  documentInStages_none: SeoWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  keywords: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  keywords_not: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  keywords_contains_all: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  keywords_contains_some: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  keywords_contains_none: [String!]
  noIndex: Boolean

  """All values that are not equal to given value."""
  noIndex_not: Boolean
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum SeoOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  keywords_ASC
  keywords_DESC
  noIndex_ASC
  noIndex_DESC
}

union SeoSeo = BlogPost | Page

input SeoSeoConnectInput {
  BlogPost: BlogPostConnectInput
  Page: PageConnectInput
}

input SeoSeoCreateInput {
  BlogPost: BlogPostCreateInput
  Page: PageCreateInput
}

input SeoSeoCreateManyInlineInput {
  """Create and connect multiple existing SeoSeo documents"""
  create: [SeoSeoCreateInput!]

  """Connect multiple existing SeoSeo documents"""
  connect: [SeoSeoWhereUniqueInput!]
}

input SeoSeoCreateOneInlineInput {
  """Create and connect one SeoSeo document"""
  create: SeoSeoCreateInput

  """Connect one existing SeoSeo document"""
  connect: SeoSeoWhereUniqueInput
}

input SeoSeoUpdateInput {
  BlogPost: BlogPostUpdateInput
  Page: PageUpdateInput
}

input SeoSeoUpdateManyInlineInput {
  """Create and connect multiple SeoSeo documents"""
  create: [SeoSeoCreateInput!]

  """Connect multiple existing SeoSeo documents"""
  connect: [SeoSeoConnectInput!]

  """
  Override currently-connected documents with multiple existing SeoSeo documents
  """
  set: [SeoSeoWhereUniqueInput!]

  """Update multiple SeoSeo documents"""
  update: [SeoSeoUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple SeoSeo documents"""
  upsert: [SeoSeoUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple SeoSeo documents"""
  disconnect: [SeoSeoWhereUniqueInput!]

  """Delete multiple SeoSeo documents"""
  delete: [SeoSeoWhereUniqueInput!]
}

input SeoSeoUpdateManyWithNestedWhereInput {
  BlogPost: BlogPostUpdateManyWithNestedWhereInput
  Page: PageUpdateManyWithNestedWhereInput
}

input SeoSeoUpdateOneInlineInput {
  """Create and connect one SeoSeo document"""
  create: SeoSeoCreateInput

  """Update single SeoSeo document"""
  update: SeoSeoUpdateWithNestedWhereUniqueInput

  """Upsert single SeoSeo document"""
  upsert: SeoSeoUpsertWithNestedWhereUniqueInput

  """Connect existing SeoSeo document"""
  connect: SeoSeoWhereUniqueInput

  """Disconnect currently connected SeoSeo document"""
  disconnect: Boolean

  """Delete currently connected SeoSeo document"""
  delete: Boolean
}

input SeoSeoUpdateWithNestedWhereUniqueInput {
  BlogPost: BlogPostUpdateWithNestedWhereUniqueInput
  Page: PageUpdateWithNestedWhereUniqueInput
}

input SeoSeoUpsertWithNestedWhereUniqueInput {
  BlogPost: BlogPostUpsertWithNestedWhereUniqueInput
  Page: PageUpsertWithNestedWhereUniqueInput
}

input SeoSeoWhereInput {
  BlogPost: BlogPostWhereInput
  Page: PageWhereInput
}

input SeoSeoWhereUniqueInput {
  BlogPost: BlogPostWhereUniqueInput
  Page: PageWhereUniqueInput
}

input SeoUpdateInput {
  title: String
  description: String
  keywords: [String!]
  noIndex: Boolean
  image: AssetUpdateOneInlineInput
  parent: SeoSeoUpdateOneInlineInput
}

input SeoUpdateManyInlineInput {
  """Create and connect multiple Seo documents"""
  create: [SeoCreateInput!]

  """Connect multiple existing Seo documents"""
  connect: [SeoConnectInput!]

  """
  Override currently-connected documents with multiple existing Seo documents
  """
  set: [SeoWhereUniqueInput!]

  """Update multiple Seo documents"""
  update: [SeoUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Seo documents"""
  upsert: [SeoUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Seo documents"""
  disconnect: [SeoWhereUniqueInput!]

  """Delete multiple Seo documents"""
  delete: [SeoWhereUniqueInput!]
}

input SeoUpdateManyInput {
  title: String
  description: String
  keywords: [String!]
  noIndex: Boolean
}

input SeoUpdateManyWithNestedWhereInput {
  """Document search"""
  where: SeoWhereInput!

  """Update many input"""
  data: SeoUpdateManyInput!
}

input SeoUpdateOneInlineInput {
  """Create and connect one Seo document"""
  create: SeoCreateInput

  """Update single Seo document"""
  update: SeoUpdateWithNestedWhereUniqueInput

  """Upsert single Seo document"""
  upsert: SeoUpsertWithNestedWhereUniqueInput

  """Connect existing Seo document"""
  connect: SeoWhereUniqueInput

  """Disconnect currently connected Seo document"""
  disconnect: Boolean

  """Delete currently connected Seo document"""
  delete: Boolean
}

input SeoUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SeoWhereUniqueInput!

  """Document to update"""
  data: SeoUpdateInput!
}

input SeoUpsertInput {
  """Create document if it didn't exist"""
  create: SeoCreateInput!

  """Update document if it exists"""
  update: SeoUpdateInput!
}

input SeoUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SeoWhereUniqueInput!

  """Upsert data"""
  data: SeoUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input SeoWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input SeoWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SeoWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeoWhereInput!]
  documentInStages_every: SeoWhereStageInput
  documentInStages_some: SeoWhereStageInput
  documentInStages_none: SeoWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String]

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String]

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  keywords: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  keywords_not: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  keywords_contains_all: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  keywords_contains_some: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  keywords_contains_none: [String!]
  noIndex: Boolean

  """All values that are not equal to given value."""
  noIndex_not: Boolean
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  image: AssetWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input SeoWhereStageInput {
  """Logical AND on all given filters."""
  AND: [SeoWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [SeoWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeoWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: SeoWhereComparatorInput
}

"""References Seo record uniquely"""
input SeoWhereUniqueInput {
  id: ID
}

"""Stage system enumeration"""
enum Stage {
  """The Draft is the default stage for all your content."""
  DRAFT

  """The Published stage is where you can publish your content to."""
  PUBLISHED
}

type Stat implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Stat!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Stat!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  value: String!
  label: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!

  """List of Stat versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input StatConnectInput {
  """Document to connect"""
  where: StatWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type StatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatEdge!]!
  aggregate: Aggregate!
}

input StatCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """value input for default locale (en)"""
  value: String!

  """label input for default locale (en)"""
  label: String!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: StatCreateLocalizationsInput
}

input StatCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  value: String!
  label: String!
}

input StatCreateLocalizationInput {
  """Localization input"""
  data: StatCreateLocalizationDataInput!
  locale: Locale!
}

input StatCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [StatCreateLocalizationInput!]
}

input StatCreateManyInlineInput {
  """Create and connect multiple existing Stat documents"""
  create: [StatCreateInput!]

  """Connect multiple existing Stat documents"""
  connect: [StatWhereUniqueInput!]
}

input StatCreateOneInlineInput {
  """Create and connect one Stat document"""
  create: StatCreateInput

  """Connect one existing Stat document"""
  connect: StatWhereUniqueInput
}

"""An edge in a connection."""
type StatEdge {
  """The item at the end of the edge."""
  node: Stat!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input StatManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [StatWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatWhereInput!]
  documentInStages_every: StatWhereStageInput
  documentInStages_some: StatWhereStageInput
  documentInStages_none: StatWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

enum StatOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  label_ASC
  label_DESC
}

input StatUpdateInput {
  """value input for default locale (en)"""
  value: String

  """label input for default locale (en)"""
  label: String

  """Manage document localizations"""
  localizations: StatUpdateLocalizationsInput
}

input StatUpdateLocalizationDataInput {
  value: String
  label: String
}

input StatUpdateLocalizationInput {
  data: StatUpdateLocalizationDataInput!
  locale: Locale!
}

input StatUpdateLocalizationsInput {
  """Localizations to create"""
  create: [StatCreateLocalizationInput!]

  """Localizations to update"""
  update: [StatUpdateLocalizationInput!]
  upsert: [StatUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input StatUpdateManyInlineInput {
  """Create and connect multiple Stat documents"""
  create: [StatCreateInput!]

  """Connect multiple existing Stat documents"""
  connect: [StatConnectInput!]

  """
  Override currently-connected documents with multiple existing Stat documents
  """
  set: [StatWhereUniqueInput!]

  """Update multiple Stat documents"""
  update: [StatUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Stat documents"""
  upsert: [StatUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Stat documents"""
  disconnect: [StatWhereUniqueInput!]

  """Delete multiple Stat documents"""
  delete: [StatWhereUniqueInput!]
}

input StatUpdateManyInput {
  """value input for default locale (en)"""
  value: String

  """label input for default locale (en)"""
  label: String

  """Optional updates to localizations"""
  localizations: StatUpdateManyLocalizationsInput
}

input StatUpdateManyLocalizationDataInput {
  value: String
  label: String
}

input StatUpdateManyLocalizationInput {
  data: StatUpdateManyLocalizationDataInput!
  locale: Locale!
}

input StatUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [StatUpdateManyLocalizationInput!]
}

input StatUpdateManyWithNestedWhereInput {
  """Document search"""
  where: StatWhereInput!

  """Update many input"""
  data: StatUpdateManyInput!
}

input StatUpdateOneInlineInput {
  """Create and connect one Stat document"""
  create: StatCreateInput

  """Update single Stat document"""
  update: StatUpdateWithNestedWhereUniqueInput

  """Upsert single Stat document"""
  upsert: StatUpsertWithNestedWhereUniqueInput

  """Connect existing Stat document"""
  connect: StatWhereUniqueInput

  """Disconnect currently connected Stat document"""
  disconnect: Boolean

  """Delete currently connected Stat document"""
  delete: Boolean
}

input StatUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: StatWhereUniqueInput!

  """Document to update"""
  data: StatUpdateInput!
}

input StatUpsertInput {
  """Create document if it didn't exist"""
  create: StatCreateInput!

  """Update document if it exists"""
  update: StatUpdateInput!
}

input StatUpsertLocalizationInput {
  update: StatUpdateLocalizationDataInput!
  create: StatCreateLocalizationDataInput!
  locale: Locale!
}

input StatUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: StatWhereUniqueInput!

  """Upsert data"""
  data: StatUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input StatWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input StatWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [StatWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatWhereInput!]
  documentInStages_every: StatWhereStageInput
  documentInStages_some: StatWhereStageInput
  documentInStages_none: StatWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String]

  """All values that are not contained in given list."""
  value_not_in: [String]

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string"""
  value_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String]

  """All values that are not contained in given list."""
  label_not_in: [String]

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string"""
  label_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input StatWhereStageInput {
  """Logical AND on all given filters."""
  AND: [StatWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [StatWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: StatWhereComparatorInput
}

"""References Stat record uniquely"""
input StatWhereUniqueInput {
  id: ID
}

enum SystemDateTimeFieldVariation {
  BASE
  LOCALIZATION
  COMBINED
}

type Testimonial implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized
    entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Testimonial!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Testimonial!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The unique identifier"""
  id: ID!
  content: String!

  """User that last published this document"""
  publishedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that last updated this document"""
  updatedBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User

  """User that created this document"""
  createdBy(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): User
  person(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `person` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `person` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): Person
  scheduledIn(
    where: ScheduledOperationWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [ScheduledOperation!]!
  pages(
    where: PageWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `pages` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `pages` is a model without localized fields and will not be
    affected directly by this argument, however the locale will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
  ): [Page!]!

  """List of Testimonial versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input TestimonialConnectInput {
  """Document to connect"""
  where: TestimonialWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type TestimonialConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestimonialEdge!]!
  aggregate: Aggregate!
}

input TestimonialCreateInput {
  updatedAt: DateTime
  createdAt: DateTime

  """content input for default locale (en)"""
  content: String!
  person: PersonCreateOneInlineInput
  pages: PageCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: TestimonialCreateLocalizationsInput
}

input TestimonialCreateLocalizationDataInput {
  updatedAt: DateTime
  createdAt: DateTime
  content: String!
}

input TestimonialCreateLocalizationInput {
  """Localization input"""
  data: TestimonialCreateLocalizationDataInput!
  locale: Locale!
}

input TestimonialCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [TestimonialCreateLocalizationInput!]
}

input TestimonialCreateManyInlineInput {
  """Create and connect multiple existing Testimonial documents"""
  create: [TestimonialCreateInput!]

  """Connect multiple existing Testimonial documents"""
  connect: [TestimonialWhereUniqueInput!]
}

input TestimonialCreateOneInlineInput {
  """Create and connect one Testimonial document"""
  create: TestimonialCreateInput

  """Connect one existing Testimonial document"""
  connect: TestimonialWhereUniqueInput
}

"""An edge in a connection."""
type TestimonialEdge {
  """The item at the end of the edge."""
  node: Testimonial!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input TestimonialManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [TestimonialWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestimonialWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestimonialWhereInput!]
  documentInStages_every: TestimonialWhereStageInput
  documentInStages_some: TestimonialWhereStageInput
  documentInStages_none: TestimonialWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  person: PersonWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

enum TestimonialOrderByInput {
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  content_ASC
  content_DESC
}

input TestimonialUpdateInput {
  """content input for default locale (en)"""
  content: String
  person: PersonUpdateOneInlineInput
  pages: PageUpdateManyInlineInput

  """Manage document localizations"""
  localizations: TestimonialUpdateLocalizationsInput
}

input TestimonialUpdateLocalizationDataInput {
  content: String
}

input TestimonialUpdateLocalizationInput {
  data: TestimonialUpdateLocalizationDataInput!
  locale: Locale!
}

input TestimonialUpdateLocalizationsInput {
  """Localizations to create"""
  create: [TestimonialCreateLocalizationInput!]

  """Localizations to update"""
  update: [TestimonialUpdateLocalizationInput!]
  upsert: [TestimonialUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input TestimonialUpdateManyInlineInput {
  """Create and connect multiple Testimonial documents"""
  create: [TestimonialCreateInput!]

  """Connect multiple existing Testimonial documents"""
  connect: [TestimonialConnectInput!]

  """
  Override currently-connected documents with multiple existing Testimonial documents
  """
  set: [TestimonialWhereUniqueInput!]

  """Update multiple Testimonial documents"""
  update: [TestimonialUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Testimonial documents"""
  upsert: [TestimonialUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Testimonial documents"""
  disconnect: [TestimonialWhereUniqueInput!]

  """Delete multiple Testimonial documents"""
  delete: [TestimonialWhereUniqueInput!]
}

input TestimonialUpdateManyInput {
  """content input for default locale (en)"""
  content: String

  """Optional updates to localizations"""
  localizations: TestimonialUpdateManyLocalizationsInput
}

input TestimonialUpdateManyLocalizationDataInput {
  content: String
}

input TestimonialUpdateManyLocalizationInput {
  data: TestimonialUpdateManyLocalizationDataInput!
  locale: Locale!
}

input TestimonialUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [TestimonialUpdateManyLocalizationInput!]
}

input TestimonialUpdateManyWithNestedWhereInput {
  """Document search"""
  where: TestimonialWhereInput!

  """Update many input"""
  data: TestimonialUpdateManyInput!
}

input TestimonialUpdateOneInlineInput {
  """Create and connect one Testimonial document"""
  create: TestimonialCreateInput

  """Update single Testimonial document"""
  update: TestimonialUpdateWithNestedWhereUniqueInput

  """Upsert single Testimonial document"""
  upsert: TestimonialUpsertWithNestedWhereUniqueInput

  """Connect existing Testimonial document"""
  connect: TestimonialWhereUniqueInput

  """Disconnect currently connected Testimonial document"""
  disconnect: Boolean

  """Delete currently connected Testimonial document"""
  delete: Boolean
}

input TestimonialUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: TestimonialWhereUniqueInput!

  """Document to update"""
  data: TestimonialUpdateInput!
}

input TestimonialUpsertInput {
  """Create document if it didn't exist"""
  create: TestimonialCreateInput!

  """Update document if it exists"""
  update: TestimonialUpdateInput!
}

input TestimonialUpsertLocalizationInput {
  update: TestimonialUpdateLocalizationDataInput!
  create: TestimonialCreateLocalizationDataInput!
  locale: Locale!
}

input TestimonialUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: TestimonialWhereUniqueInput!

  """Upsert data"""
  data: TestimonialUpsertInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input TestimonialWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input TestimonialWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [TestimonialWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestimonialWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestimonialWhereInput!]
  documentInStages_every: TestimonialWhereStageInput
  documentInStages_some: TestimonialWhereStageInput
  documentInStages_none: TestimonialWhereStageInput
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String]

  """All values that are not contained in given list."""
  content_not_in: [String]

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string"""
  content_not_ends_with: String
  publishedBy: UserWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  person: PersonWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input TestimonialWhereStageInput {
  """Logical AND on all given filters."""
  AND: [TestimonialWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [TestimonialWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestimonialWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: TestimonialWhereComparatorInput
}

"""References Testimonial record uniquely"""
input TestimonialWhereUniqueInput {
  id: ID
}

input UnpublishLocaleInput {
  """Locales to unpublish"""
  locale: Locale!

  """Stages to unpublish selected locales from"""
  stages: [Stage!]!
}

"""User system model"""
type User implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [User!]!

  """Flag to determine if user is active or not"""
  isActive: Boolean!

  """Profile Picture url"""
  picture: String

  """The username"""
  name: String!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was created"""
  createdAt: DateTime!

  """The unique identifier"""
  id: ID!

  """User Kind. Can be either MEMBER, PAT or PUBLIC"""
  kind: UserKind!
}

input UserConnectInput {
  """Document to connect"""
  where: UserWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge!]!
  aggregate: Aggregate!
}

input UserCreateManyInlineInput {
  """Connect multiple existing User documents"""
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInlineInput {
  """Connect one existing User document"""
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""System User Kind"""
enum UserKind {
  MEMBER
  PUBLIC
  PAT
  WEBHOOK
}

"""Identifies documents"""
input UserManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  documentInStages_every: UserWhereStageInput
  documentInStages_some: UserWhereStageInput
  documentInStages_none: UserWhereStageInput
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String]

  """All values that are not contained in given list."""
  picture_not_in: [String]

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string"""
  picture_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  kind: UserKind

  """All values that are not equal to given value."""
  kind_not: UserKind

  """All values that are contained in given list."""
  kind_in: [UserKind]

  """All values that are not contained in given list."""
  kind_not_in: [UserKind]
}

enum UserOrderByInput {
  isActive_ASC
  isActive_DESC
  picture_ASC
  picture_DESC
  name_ASC
  name_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  kind_ASC
  kind_DESC
}

input UserUpdateManyInlineInput {
  """Connect multiple existing User documents"""
  connect: [UserConnectInput!]

  """
  Override currently-connected documents with multiple existing User documents
  """
  set: [UserWhereUniqueInput!]

  """Disconnect multiple User documents"""
  disconnect: [UserWhereUniqueInput!]
}

input UserUpdateOneInlineInput {
  """Connect existing User document"""
  connect: UserWhereUniqueInput

  """Disconnect currently connected User document"""
  disconnect: Boolean
}

"""
This contains a set of filters that can be used to compare values internally
"""
input UserWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input UserWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  documentInStages_every: UserWhereStageInput
  documentInStages_some: UserWhereStageInput
  documentInStages_none: UserWhereStageInput
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String]

  """All values that are not contained in given list."""
  picture_not_in: [String]

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string"""
  picture_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String]

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  kind: UserKind

  """All values that are not equal to given value."""
  kind_not: UserKind

  """All values that are contained in given list."""
  kind_in: [UserKind]

  """All values that are not contained in given list."""
  kind_not_in: [UserKind]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input UserWhereStageInput {
  """Logical AND on all given filters."""
  AND: [UserWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereStageInput!]

  """Specify the stage to compare with"""
  stage: Stage

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: UserWhereComparatorInput
}

"""References User record uniquely"""
input UserWhereUniqueInput {
  id: ID
}

type Version {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
}

input VersionWhereInput {
  id: ID!
  stage: Stage!
  revision: Int!
}
